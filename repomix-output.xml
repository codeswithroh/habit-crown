This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules, public
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  assets/
    react.svg
  components/
    analytics/
      Analytics.tsx
    auth/
      AuthLayout.tsx
      LoginForm.tsx
      SignUpForm.tsx
    habits/
      HabitForm.tsx
      HabitsList.tsx
      HabitSuggestions.tsx
    layout/
      Dashboard.tsx
      Header.tsx
    rewards/
      ClaimRewardModal.tsx
      CompleteRewardCard.tsx
      RewardCard.tsx
      RewardForm.tsx
    ui/
      ProgressRing.tsx
  hooks/
    useAnalytics.tsx
    useAuth.tsx
    useHabits.tsx
    useHabitSuggestions.ts
    useRewards.tsx
  services/
    analytics.service.ts
    geminiService.ts
    supabase.ts
  types/
    database.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
GEMINI_SETUP.md
index.html
package.json
README.md
structure.txt
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/habits/HabitSuggestions.tsx">
import { Loader2, AlertCircle } from 'lucide-react';

interface HabitSuggestionsProps {
  suggestions: string[];
  isLoading: boolean;
  isModelLoaded: boolean;
  error: string | null;
  remainingRequests: number;
  totalRequests: number;
  onSelectSuggestion: (suggestion: string) => void;
}

export const HabitSuggestions = ({
  suggestions,
  isLoading,
  error,
  onSelectSuggestion,
}: HabitSuggestionsProps) => {
  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-4">
        <Loader2 className="h-4 w-4 animate-spin text-purple-600 mr-2" />
        <span className="text-sm text-purple-700">Generating suggestions...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center py-3 text-amber-700 bg-amber-50 rounded-md border border-amber-200">
        <AlertCircle className="h-4 w-4 mr-2" />
        <span className="text-sm">{error}</span>
      </div>
    );
  }

  if (suggestions.length === 0) {
    return (
      <div className="text-center py-3">
        <p className="text-sm text-purple-600">
          Enter a topic above and click "Get Ideas" to see AI suggestions
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-2">
      <p className="text-xs text-purple-700 mb-2">Click any suggestion to use it:</p>
      {suggestions.map((suggestion, index) => (
        <button
          key={index}
          onClick={() => onSelectSuggestion(suggestion)}
          className="w-full text-left p-2 text-sm bg-white hover:bg-purple-50 border border-purple-100 rounded-md transition-colors duration-200 hover:border-purple-300 group"
        >
          <span className="inline-block w-5 h-5 bg-purple-100 text-purple-600 rounded-full text-xs font-medium mr-3 text-center leading-5 group-hover:bg-purple-200">
            {index + 1}
          </span>
          {suggestion}
        </button>
      ))}
    </div>
  );
};
</file>

<file path="src/components/rewards/CompleteRewardCard.tsx">
import { useState } from "react";
import type { RewardWithHabits } from "../../types/database";
import { useRewards } from "../../hooks/useRewards";
import { useHabits } from "../../hooks/useHabits";
import { 
  Trophy, 
  Calendar, 
  Target, 
  Copy, 
  Sparkles,
  ChevronDown,
  ChevronUp,
  RotateCcw
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "react-hot-toast";

interface CompletedRewardCardProps {
  reward: RewardWithHabits;
}

export const CompletedRewardCard = ({ reward }: CompletedRewardCardProps) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showNewRewardForm, setShowNewRewardForm] = useState(false);
  const [newRewardTitle, setNewRewardTitle] = useState("");
  const [newRewardTargetPoints, setNewRewardTargetPoints] = useState(1000);
  const [isCreatingNewReward, setIsCreatingNewReward] = useState(false);
  
  const { createReward } = useRewards();
  const { habits, createHabit } = useHabits(reward.id);

  const completedDate = new Date(reward.updated_at).toLocaleDateString();
  const daysToComplete = Math.ceil(
    (new Date(reward.updated_at).getTime() - new Date(reward.created_at).getTime()) / 
    (1000 * 60 * 60 * 24)
  );

  const handleCreateSimilarReward = async () => {
    if (!newRewardTitle.trim()) {
      toast.error("Please enter a reward title");
      return;
    }

    setIsCreatingNewReward(true);
    try {
      // Create new reward
      const newReward = await new Promise<any>((resolve, reject) => {
        createReward(
          {
            title: newRewardTitle,
            description: `Based on successful habits from: ${reward.title}`,
            target_points: newRewardTargetPoints,
          },
          {
            onSuccess: resolve,
            onError: reject,
          }
        );
      });

      // Copy all habits from the completed reward to the new reward
      const habitCopyPromises = habits.map(habit => 
        new Promise((resolve, reject) => {
          createHabit(
            {
              reward_id: newReward.id,
              name: habit.name,
              points_per_completion: habit.points_per_completion,
            },
            {
              onSuccess: resolve,
              onError: reject,
            }
          );
        })
      );

      await Promise.all(habitCopyPromises);

      toast.success(`New reward "${newRewardTitle}" created with ${habits.length} habits!`);
      setShowNewRewardForm(false);
      setNewRewardTitle("");
      setNewRewardTargetPoints(1000);
    } catch (error: any) {
      toast.error(error.message || "Failed to create new reward");
    } finally {
      setIsCreatingNewReward(false);
    }
  };

  const suggestedTitles = [
    `${reward.title} 2.0`,
    `Advanced ${reward.title}`,
    `Next Level ${reward.title}`,
    `${reward.title} - Round 2`
  ];

  return (
    <motion.div
      whileHover={{ y: -2 }}
      className="bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-200 rounded-xl shadow-lg transition-all duration-300 hover:shadow-xl"
    >
      <div className="p-6">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1">
            <div className="flex items-center mb-2">
              <Trophy className="h-5 w-5 text-yellow-500 mr-2" />
              <h3 className="text-xl font-bold text-gray-800">{reward.title}</h3>
            </div>
            {reward.description && (
              <p className="text-gray-600 text-sm mb-2">{reward.description}</p>
            )}
            <div className="flex items-center space-x-4 text-sm text-green-700">
              <div className="flex items-center">
                <Calendar className="h-4 w-4 mr-1" />
                <span>Completed {completedDate}</span>
              </div>
              <div className="flex items-center">
                <Target className="h-4 w-4 mr-1" />
                <span>{daysToComplete} days</span>
              </div>
            </div>
          </div>
          
          <div className="bg-green-100 px-3 py-1 rounded-full">
            <span className="text-green-800 text-sm font-medium">CLAIMED</span>
          </div>
        </div>

        {/* Progress Bar (Full) */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">Progress</span>
            <span className="text-sm text-gray-600">
              {reward.current_points} / {reward.target_points} points
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <div className="h-3 bg-gradient-to-r from-green-400 to-green-600 rounded-full w-full" />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="space-y-3 mb-4">
          <button
            onClick={() => setShowNewRewardForm(!showNewRewardForm)}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg flex items-center justify-center space-x-2"
          >
            <Copy className="h-4 w-4" />
            <span>Create Similar Reward</span>
          </button>

          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2"
          >
            <span>View Habits ({habits.length})</span>
            {isExpanded ? (
              <ChevronUp className="h-4 w-4" />
            ) : (
              <ChevronDown className="h-4 w-4" />
            )}
          </button>
        </div>

        {/* New Reward Form */}
        <AnimatePresence>
          {showNewRewardForm && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="overflow-hidden"
            >
              <div className="bg-white rounded-lg p-4 border border-purple-200 mb-4">
                <div className="flex items-center mb-3">
                  <Sparkles className="h-4 w-4 text-purple-600 mr-2" />
                  <h4 className="font-semibold text-gray-800">Create New Reward</h4>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Reward Title *
                    </label>
                    <input
                      type="text"
                      value={newRewardTitle}
                      onChange={(e) => setNewRewardTitle(e.target.value)}
                      placeholder="Enter new reward title..."
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm"
                    />
                    
                    {/* Quick suggestions */}
                    <div className="flex flex-wrap gap-1 mt-2">
                      {suggestedTitles.map((title, index) => (
                        <button
                          key={index}
                          onClick={() => setNewRewardTitle(title)}
                          className="text-xs bg-purple-50 text-purple-700 px-2 py-1 rounded hover:bg-purple-100 transition-colors"
                        >
                          {title}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Target Points *
                    </label>
                    <select
                      value={newRewardTargetPoints}
                      onChange={(e) => setNewRewardTargetPoints(Number(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm"
                    >
                      <option value={500}>500 points (Easier)</option>
                      <option value={1000}>1000 points (Same as before)</option>
                      <option value={1500}>1500 points (More challenging)</option>
                      <option value={2000}>2000 points (Much harder)</option>
                    </select>
                  </div>

                  <div className="bg-blue-50 p-3 rounded-lg">
                    <p className="text-xs text-blue-700">
                      <RotateCcw className="h-3 w-3 inline mr-1" />
                      This will copy all {habits.length} habits from "{reward.title}" to your new reward
                    </p>
                  </div>

                  <div className="flex space-x-2">
                    <button
                      onClick={handleCreateSimilarReward}
                      disabled={isCreatingNewReward || !newRewardTitle.trim()}
                      className="flex-1 bg-gradient-to-r from-green-500 to-emerald-600 text-white py-2 px-4 rounded-lg font-medium hover:from-green-600 hover:to-emerald-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed text-sm flex items-center justify-center"
                    >
                      {isCreatingNewReward ? (
                        <>
                          <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-2" />
                          Creating...
                        </>
                      ) : (
                        <>
                          <Copy className="h-3 w-3 mr-2" />
                          Create Reward
                        </>
                      )}
                    </button>
                    <button
                      onClick={() => setShowNewRewardForm(false)}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Habits List (Expandable) */}
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="overflow-hidden"
            >
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                  <Target className="h-4 w-4 mr-2" />
                  Successful Habits ({habits.length})
                </h4>
                
                {habits.length > 0 ? (
                  <div className="space-y-2">
                    {habits.map((habit) => (
                      <div
                        key={habit.id}
                        className="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200"
                      >
                        <div className="flex items-center">
                          <div className="w-2 h-2 bg-green-400 rounded-full mr-3" />
                          <div>
                            <h5 className="font-medium text-gray-800">{habit.name}</h5>
                            <p className="text-xs text-gray-500">
                              {habit.points_per_completion} points per completion
                            </p>
                          </div>
                        </div>
                        <div className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded">
                          Mastered
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-sm text-center py-4">
                    No habits were associated with this reward
                  </p>
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Achievement Badge */}
        <div className="mt-4 text-center">
          <div className="inline-flex items-center bg-gradient-to-r from-yellow-400 to-orange-400 text-white px-4 py-2 rounded-full text-sm font-medium">
            <Trophy className="h-4 w-4 mr-2" />
            Achievement Unlocked!
          </div>
        </div>
      </div>
    </motion.div>
  );
};
</file>

<file path="src/hooks/useHabitSuggestions.ts">
import { useState, useCallback, useEffect } from 'react';
import { useHabits } from './useHabits';
import GeminiService, { generateRuleBasedSuggestions, type UsageInfo } from '../services/geminiService';

interface UseHabitSuggestionsReturn {
    suggestions: string[];
    isLoading: boolean;
    error: string | null;
    remainingRequests: number;
    totalRequests: number;
    refreshSuggestions: (input: string) => void;
    clearSuggestions: () => void;
}

export const useHabitSuggestions = (): UseHabitSuggestionsReturn => {
    const [suggestions, setSuggestions] = useState<string[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [usageInfo, setUsageInfo] = useState<UsageInfo>({ remaining: 10, total: 10, isLimited: false });

    const { habits } = useHabits();

    // Update usage info on mount and when suggestions are generated
    const updateUsageInfo = useCallback(() => {
        const info = GeminiService.getUsageInfo();
        setUsageInfo(info);
    }, []);

    useEffect(() => {
        updateUsageInfo();
    }, [updateUsageInfo]);

    // Get existing habit names for context
    const getExistingHabits = useCallback(() => {
        return habits.map(habit => habit.name);
    }, [habits]);

    const refreshSuggestions = useCallback(async (input: string) => {
        if (!input.trim()) {
            // Show rule-based suggestions for empty input
            const fallbackSuggestions = generateRuleBasedSuggestions('fitness');
            setSuggestions(fallbackSuggestions);
            return;
        }

        setIsLoading(true);
        setError(null);

        try {
            const existingHabits = getExistingHabits();

            // Try Gemini API first with context
            const aiSuggestions = await GeminiService.generateSuggestionsWithContext(
                input.trim(),
                existingHabits
            );
            setSuggestions(aiSuggestions);
            updateUsageInfo(); // Update usage after successful API call
        } catch (error: any) {
            console.warn('Gemini API failed, using rule-based suggestions:', error);

            // Fall back to rule-based suggestions
            const fallbackSuggestions = generateRuleBasedSuggestions(input.trim());
            setSuggestions(fallbackSuggestions);

            // Set appropriate error message
            if (error.message.includes('Daily AI suggestion limit reached')) {
                setError('Daily AI limit reached (10/day). Showing smart suggestions instead.');
            } else if (error.message.includes('API key not configured')) {
                setError('AI suggestions unavailable. Showing smart suggestions instead.');
            } else {
                setError('AI temporarily unavailable. Showing smart suggestions instead.');
            }
        } finally {
            setIsLoading(false);
        }
    }, [updateUsageInfo, getExistingHabits]);

    const clearSuggestions = useCallback(() => {
        setSuggestions([]);
        setError(null);
    }, []);

    return {
        suggestions,
        isLoading,
        error,
        remainingRequests: usageInfo.remaining,
        totalRequests: usageInfo.total,
        refreshSuggestions,
        clearSuggestions,
    };
};
</file>

<file path="src/services/geminiService.ts">
// Google Gemini API configuration
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// Rate limiting: 10 requests per user per day
const DAILY_LIMIT = 10;
const STORAGE_KEY = 'habitSuggestions_usage';

export interface UsageInfo {
    remaining: number;
    total: number;
    isLimited: boolean;
}

class GeminiService {
    static canMakeRequest(): boolean {
        const today = new Date().toDateString();
        const stored = this.getStoredUsage();

        if (stored.date !== today) {
            // New day, reset counter
            return true;
        }

        return stored.count < DAILY_LIMIT;
    }

    static getStoredUsage(): { date: string; count: number } {
        try {
            const stored = localStorage.getItem(STORAGE_KEY);
            if (stored) {
                return JSON.parse(stored);
            }
        } catch (error) {
            console.warn('Could not read usage from localStorage:', error);
        }

        return { date: new Date().toDateString(), count: 0 };
    }

    static incrementUsage(): number {
        try {
            const today = new Date().toDateString();
            const stored = this.getStoredUsage();

            const newUsage = {
                date: today,
                count: stored.date === today ? stored.count + 1 : 1
            };

            localStorage.setItem(STORAGE_KEY, JSON.stringify(newUsage));
            return DAILY_LIMIT - newUsage.count;
        } catch (error) {
            console.warn('Could not store usage in localStorage:', error);
            return 0;
        }
    }

    static getRemainingRequests(): number {
        const stored = this.getStoredUsage();
        const today = new Date().toDateString();

        if (stored.date !== today) {
            return DAILY_LIMIT;
        }

        return Math.max(0, DAILY_LIMIT - stored.count);
    }

    static getUsageInfo(): UsageInfo {
        const remaining = this.getRemainingRequests();
        return {
            remaining,
            total: DAILY_LIMIT,
            isLimited: remaining === 0
        };
    }

    static async generateSuggestions(input: string): Promise<string[]> {
        return this.generateSuggestionsWithContext(input, []);
    }

    static async generateSuggestionsWithContext(input: string, existingHabits: string[] = []): Promise<string[]> {
        // Check rate limit first
        if (!this.canMakeRequest()) {
            throw new Error('Daily AI suggestion limit reached (10/day). Using smart suggestions instead.');
        }

        // Check if API key is available
        if (!GEMINI_API_KEY) {
            throw new Error('Gemini API key not configured');
        }

        try {
            const suggestions = await this.callGeminiAPIWithContext(input, existingHabits);
            if (suggestions && suggestions.length > 0) {
                this.incrementUsage();
                return suggestions;
            }
            throw new Error('No suggestions generated');
        } catch (error) {
            console.warn('Gemini API failed:', error);
            throw error;
        }
    }

    private static async callGeminiAPIWithContext(input: string, existingHabits: string[]): Promise<string[]> {
        const existingHabitsText = existingHabits.length > 0
            ? `\n\nUser's existing habits:\n${existingHabits.map(h => `- ${h}`).join('\n')}`
            : '';

        const prompt = `Generate exactly 3 short, one-liner habit suggestions for "${input}". 

Requirements:
- Each habit must be a single, short sentence (max 8 words)
- Make them actionable and specific
- Focus on daily micro-habits
- Avoid duplicating existing habits
- Format as numbered list

Examples:
1. Walk 10,000 steps daily
2. Meditate for 5 minutes each morning
3. Drink water before every meal

Topic: ${input}${existingHabitsText}

Generate 3 new habits:`;

        const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }],
                generationConfig: {
                    temperature: 0.8,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 150,
                }
            })
        });

        if (!response.ok) {
            throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();

        if (result.error) {
            throw new Error(result.error.message || 'Gemini API error');
        }

        const generatedText = result.candidates?.[0]?.content?.parts?.[0]?.text || '';
        return this.parseGeminiSuggestions(generatedText, input);
    }

    private static parseGeminiSuggestions(text: string, _input: string): string[] {
        const lines = text.split('\n').filter(line => line.trim());
        const suggestions: string[] = [];

        for (const line of lines) {
            const match = line.match(/^\d+\.\s*(.+)$/);
            if (match && match[1].trim()) {
                suggestions.push(match[1].trim());
            }
        }

        // If parsing fails or we don't have enough suggestions, throw error
        if (suggestions.length < 3) {
            throw new Error('Failed to parse enough suggestions from Gemini response');
        }

        return suggestions.slice(0, 3);
    }
}

// Smart rule-based fallback suggestions (one-liners)
export function generateRuleBasedSuggestions(input: string): string[] {
    const lowerInput = input.toLowerCase();
    const suggestions: string[] = [];

    if (lowerInput.includes('exercise') || lowerInput.includes('workout') || lowerInput.includes('fitness')) {
        suggestions.push(
            'Walk 10,000 steps daily',
            'Do 20 push-ups each morning',
            'Take stairs instead of elevators'
        );
    } else if (lowerInput.includes('read') || lowerInput.includes('book') || lowerInput.includes('study')) {
        suggestions.push(
            'Read 10 pages before bed',
            'Listen to audiobooks while commuting',
            'Read one article during lunch'
        );
    } else if (lowerInput.includes('water') || lowerInput.includes('drink') || lowerInput.includes('hydrat')) {
        suggestions.push(
            'Drink water before every meal',
            'Carry a water bottle everywhere',
            'Set hourly water drinking reminders'
        );
    } else if (lowerInput.includes('meditat') || lowerInput.includes('mindful') || lowerInput.includes('relax')) {
        suggestions.push(
            'Meditate for 5 minutes daily',
            'Practice deep breathing twice daily',
            'Take mindful walks in nature'
        );
    } else if (lowerInput.includes('sleep') || lowerInput.includes('rest')) {
        suggestions.push(
            'Sleep 8 hours every night',
            'Avoid screens before bedtime',
            'Create a consistent bedtime routine'
        );
    } else if (lowerInput.includes('eat') || lowerInput.includes('food') || lowerInput.includes('nutrition')) {
        suggestions.push(
            'Eat 5 servings of vegetables daily',
            'Plan meals every Sunday',
            'Chew food slowly and mindfully'
        );
    } else if (lowerInput.includes('work') || lowerInput.includes('productivity') || lowerInput.includes('focus')) {
        suggestions.push(
            'Use Pomodoro timer for work',
            'Write 3 priorities each morning',
            'Turn off phone during deep work'
        );
    } else {
        suggestions.push(
            `Practice ${input} for 30 minutes`,
            `Set daily ${input} reminders`,
            `Track ${input} progress weekly`
        );
    }

    return suggestions.slice(0, 3);
}

export default GeminiService;
</file>

<file path="GEMINI_SETUP.md">
# Gemini API Setup Instructions

## 1. Get Your Free Gemini API Key

1. Go to [Google AI Studio](https://aistudio.google.com/app/apikey)
2. Sign in with your Google account
3. Click "Create API Key"
4. Copy your API key

## 2. Add API Key as Environment Variable

Create a `.env` file in your project root and add:

```bash
VITE_GEMINI_API_KEY=your-actual-api-key-here
```

**Important**: Never commit your API key to version control!

## 3. Features

- ✅ **10 AI suggestions per day per user**
- ✅ **Fast response time** (~200-500ms)
- ✅ **Smart fallback** to rule-based suggestions when limit reached
- ✅ **Usage tracking** shown in UI
- ✅ **Completely free** (Gemini free tier: 15 requests/minute, 1500/day)

## 4. Rate Limiting

- Users get 10 AI-powered suggestions per day
- Counter resets at midnight
- When limit reached, switches to intelligent rule-based suggestions
- Usage is stored in browser localStorage

## 5. Fallback System

If API fails or limit reached, the system uses smart rule-based suggestions for:
- Exercise/Fitness habits
- Reading/Study habits  
- Water/Hydration habits
- Meditation/Mindfulness habits
- Sleep habits
- Generic habits

This ensures users always get helpful suggestions!
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/analytics/Analytics.tsx">
import { useState } from "react";
import { useAnalytics } from "../../hooks/useAnalytics";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
} from "recharts";
import { ProgressRing } from "../ui/ProgressRing";
import {
  TrendingUp,
  Target,
  Trophy,
  Flame,
  Calendar,
  BarChart3,
  Clock,
  Award,
} from "lucide-react";
import { motion } from "framer-motion";

export const Analytics = () => {
  const [viewMode, setViewMode] = useState<"daily" | "weekly">("daily");
  const { dailyStats, weeklyStats, streakData, rewardOverview, isLoading } =
    useAnalytics();

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  const currentData = viewMode === "daily" ? dailyStats : weeklyStats;
  const totalPointsProgress =
    rewardOverview.totalTargetPoints > 0
      ? (rewardOverview.totalPointsEarned / rewardOverview.totalTargetPoints) *
        100
      : 0;

  const recentCompletionRate =
    dailyStats.slice(-7).reduce((sum, day) => sum + day.completionRate, 0) / 7;

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold text-gray-800">Analytics</h2>
          <p className="text-gray-600 mt-1">Track your progress and insights</p>
        </div>

        <div className="flex items-center space-x-2 bg-white rounded-lg border border-gray-200 p-1">
          <button
            onClick={() => setViewMode("daily")}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              viewMode === "daily"
                ? "bg-purple-600 text-white"
                : "text-gray-600 hover:text-gray-800"
            }`}
          >
            Daily
          </button>
          <button
            onClick={() => setViewMode("weekly")}
            className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
              viewMode === "weekly"
                ? "bg-purple-600 text-white"
                : "text-gray-600 hover:text-gray-800"
            }`}
          >
            Weekly
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <div className="flex items-center justify-between mb-4">
            <div className="bg-orange-100 p-3 rounded-lg">
              <Flame className="h-6 w-6 text-orange-600" />
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-gray-800">
                {streakData.currentStreak}
              </p>
              <p className="text-sm text-gray-600">Current Streak</p>
            </div>
          </div>
          <div className="text-xs text-gray-500">
            Longest: {streakData.longestStreak} days
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <div className="flex items-center justify-between mb-4">
            <div className="bg-blue-100 p-3 rounded-lg">
              <BarChart3 className="h-6 w-6 text-blue-600" />
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-gray-800">
                {Math.round(recentCompletionRate)}%
              </p>
              <p className="text-sm text-gray-600">7-Day Rate</p>
            </div>
          </div>
          <div className="text-xs text-gray-500">Weekly completion average</div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <div className="flex items-center justify-between mb-4">
            <div className="bg-green-100 p-3 rounded-lg">
              <TrendingUp className="h-6 w-6 text-green-600" />
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-gray-800">
                {rewardOverview.totalPointsEarned}
              </p>
              <p className="text-sm text-gray-600">Points Earned</p>
            </div>
          </div>
          <div className="text-xs text-gray-500">Total lifetime points</div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <div className="flex items-center justify-between mb-4">
            <div className="bg-purple-100 p-3 rounded-lg">
              <Trophy className="h-6 w-6 text-purple-600" />
            </div>
            <div className="text-right">
              <p className="text-2xl font-bold text-gray-800">
                {rewardOverview.claimedRewards}
              </p>
              <p className="text-sm text-gray-600">Rewards Claimed</p>
            </div>
          </div>
          <div className="text-xs text-gray-500">
            Out of {rewardOverview.totalRewards} total
          </div>
        </motion.div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-semibold text-gray-800">
              {viewMode === "daily" ? "Daily" : "Weekly"} Progress
            </h3>
            <div className="flex items-center space-x-4 text-sm">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
                <span className="text-gray-600">Points Earned</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                <span className="text-gray-600">Completion Rate</span>
              </div>
            </div>
          </div>

          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={currentData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis
                  dataKey={viewMode === "daily" ? "date" : "week"}
                  stroke="#666"
                  fontSize={12}
                  tickFormatter={(value) => {
                    if (viewMode === "daily") {
                      return new Date(value).toLocaleDateString("en", {
                        month: "short",
                        day: "numeric",
                      });
                    }
                    return value.split(" - ")[0];
                  }}
                />
                <YAxis stroke="#666" fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "white",
                    border: "1px solid #e5e7eb",
                    borderRadius: "8px",
                    boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                  }}
                  formatter={(value, name) => [
                    typeof value === "number" ? value.toFixed(1) : value,
                    name === "pointsEarned"
                      ? "Points"
                      : name === "completionRate"
                      ? "Rate (%)"
                      : name === "averageCompletionRate"
                      ? "Avg Rate (%)"
                      : name,
                  ]}
                />
                <Line
                  type="monotone"
                  dataKey="pointsEarned"
                  stroke="#8b5cf6"
                  strokeWidth={3}
                  dot={{ fill: "#8b5cf6", strokeWidth: 0, r: 4 }}
                  activeDot={{ r: 6 }}
                />
                <Line
                  type="monotone"
                  dataKey={
                    viewMode === "daily"
                      ? "completionRate"
                      : "averageCompletionRate"
                  }
                  stroke="#3b82f6"
                  strokeWidth={3}
                  dot={{ fill: "#3b82f6", strokeWidth: 0, r: 4 }}
                  activeDot={{ r: 6 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <h3 className="text-xl font-semibold text-gray-800 mb-6">
            Reward Progress
          </h3>

          <div className="space-y-6">
            <div className="text-center">
              <ProgressRing
                progress={totalPointsProgress}
                size={120}
                strokeWidth={8}
                className="text-purple-500 mx-auto mb-4"
              />
              <p className="text-sm text-gray-600 mb-2">Overall Progress</p>
              <p className="text-lg font-semibold text-gray-800">
                {rewardOverview.totalPointsEarned} /{" "}
                {rewardOverview.totalTargetPoints}
              </p>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Award className="h-5 w-5 text-green-600" />
                  <span className="text-sm font-medium text-green-800">
                    Active
                  </span>
                </div>
                <span className="text-lg font-bold text-green-800">
                  {rewardOverview.activeRewards}
                </span>
              </div>

              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Target className="h-5 w-5 text-blue-600" />
                  <span className="text-sm font-medium text-blue-800">
                    Completed
                  </span>
                </div>
                <span className="text-lg font-bold text-blue-800">
                  {rewardOverview.completedRewards}
                </span>
              </div>

              <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Trophy className="h-5 w-5 text-yellow-600" />
                  <span className="text-sm font-medium text-yellow-800">
                    Claimed
                  </span>
                </div>
                <span className="text-lg font-bold text-yellow-800">
                  {rewardOverview.claimedRewards}
                </span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>

      {dailyStats.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.7 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <h3 className="text-xl font-semibold text-gray-800 mb-6">
            Daily Completions
          </h3>

          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={dailyStats.slice(-14)}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis
                  dataKey="date"
                  stroke="#666"
                  fontSize={12}
                  tickFormatter={(value) =>
                    new Date(value).toLocaleDateString("en", {
                      weekday: "short",
                    })
                  }
                />
                <YAxis stroke="#666" fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "white",
                    border: "1px solid #e5e7eb",
                    borderRadius: "8px",
                    boxShadow: "0 4px 6px -1px rgba(0, 0, 0, 0.1)",
                  }}
                  formatter={(value, _name) => [value, "Completions"]}
                  labelFormatter={(label) =>
                    new Date(label).toLocaleDateString()
                  }
                />
                <Bar
                  dataKey="completions"
                  fill="#8b5cf6"
                  radius={[4, 4, 0, 0]}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </motion.div>
      )}

      {dailyStats.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
          className="bg-white p-6 rounded-xl shadow-lg border border-gray-200"
        >
          <h3 className="text-xl font-semibold text-gray-800 mb-6">
            Recent Activity
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg">
              <Calendar className="h-8 w-8 text-blue-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-blue-800">
                {dailyStats
                  .slice(-7)
                  .reduce((sum, day) => sum + day.completions, 0)}
              </p>
              <p className="text-sm text-blue-600">This Week</p>
            </div>

            <div className="text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg">
              <TrendingUp className="h-8 w-8 text-green-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-green-800">
                {dailyStats
                  .slice(-7)
                  .reduce((sum, day) => sum + day.pointsEarned, 0)}
              </p>
              <p className="text-sm text-green-600">Points This Week</p>
            </div>

            <div className="text-center p-4 bg-gradient-to-br from-purple-50 to-violet-50 rounded-lg">
              <Clock className="h-8 w-8 text-purple-600 mx-auto mb-2" />
              <p className="text-2xl font-bold text-purple-800">
                {dailyStats
                  .slice(-30)
                  .reduce((sum, day) => sum + day.completions, 0)}
              </p>
              <p className="text-sm text-purple-600">This Month</p>
            </div>
          </div>

          <div className="mt-6">
            <h4 className="text-lg font-semibold text-gray-800 mb-4">
              Quick Stats
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-600">Best Day This Month</span>
                <span className="font-semibold text-gray-800">
                  {Math.max(...dailyStats.slice(-30).map((d) => d.completions))}{" "}
                  completions
                </span>
              </div>

              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-600">Average Daily Points</span>
                <span className="font-semibold text-gray-800">
                  {dailyStats.length > 0
                    ? Math.round(
                        dailyStats
                          .slice(-30)
                          .reduce((sum, day) => sum + day.pointsEarned, 0) /
                          Math.min(30, dailyStats.length)
                      )
                    : 0}{" "}
                  pts
                </span>
              </div>

              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-600">Most Productive Day</span>
                <span className="font-semibold text-gray-800">
                  {dailyStats.length > 0 && dailyStats.slice(-30).length > 0
                    ? new Date(
                        dailyStats
                          .slice(-30)
                          .reduce((max, day) =>
                            day.completions > max.completions ? day : max
                          ).date
                      ).toLocaleDateString("en", { weekday: "long" })
                    : "No data"}
                </span>
              </div>

              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="text-gray-600">Completion Trend</span>
                <span
                  className={`font-semibold ${
                    dailyStats.length >= 2 &&
                    dailyStats[dailyStats.length - 1].completionRate >
                      dailyStats[dailyStats.length - 2].completionRate
                      ? "text-green-600"
                      : dailyStats.length >= 2 &&
                        dailyStats[dailyStats.length - 1].completionRate <
                          dailyStats[dailyStats.length - 2].completionRate
                      ? "text-red-600"
                      : "text-gray-600"
                  }`}
                >
                  {dailyStats.length >= 2
                    ? dailyStats[dailyStats.length - 1].completionRate >
                      dailyStats[dailyStats.length - 2].completionRate
                      ? "📈 Improving"
                      : dailyStats[dailyStats.length - 1].completionRate <
                        dailyStats[dailyStats.length - 2].completionRate
                      ? "📉 Declining"
                      : "➡️ Steady"
                    : "No trend data"}
                </span>
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};
</file>

<file path="src/components/auth/AuthLayout.tsx">
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { LoginForm } from "./LoginForm";
import { SignUpForm } from "./SignUpForm";
import { Coffee, Heart, Sparkles, Cookie, Croissant } from "lucide-react";

export const AuthLayout: React.FC = () => {
  const [isSignUp, setIsSignUp] = useState(false);

  const handleSwitchToSignUp = () => setIsSignUp(true);
  const handleSwitchToLogin = () => setIsSignUp(false);

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 flex items-center justify-center p-4 relative overflow-hidden">
      {/* Floating coffee beans and pastries */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(15)].map((_, i) => (
          <motion.div
            key={`float-${i}`}
            className="absolute opacity-20"
            initial={{ 
              x: Math.random() * window.innerWidth,
              y: window.innerHeight + 50,
              rotate: 0
            }}
            animate={{ 
              y: -50,
              rotate: 360,
              x: Math.random() * window.innerWidth
            }}
            transition={{
              duration: 15 + Math.random() * 10,
              repeat: Infinity,
              ease: "linear",
              delay: i * 2
            }}
          >
            {i % 4 === 0 && <Coffee className="h-6 w-6 text-amber-400" />}
            {i % 4 === 1 && <Cookie className="h-5 w-5 text-orange-400" />}
            {i % 4 === 2 && <Croissant className="h-6 w-6 text-yellow-600" />}
            {i % 4 === 3 && <Heart className="h-4 w-4 text-red-300" />}
          </motion.div>
        ))}
      </div>

      <div className="w-full max-w-6xl flex items-center justify-center relative z-10">
        <div className="grid lg:grid-cols-2 gap-12 items-center w-full">
          {/* Left side - Cafe Branding */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, ease: "easeOut" }}
            className="hidden lg:block text-center lg:text-left"
          >
            <div className="space-y-8">
              {/* Logo */}
              <motion.div 
                className="flex items-center justify-center lg:justify-start space-x-4"
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 400 }}
              >
                <motion.div 
                  className="relative"
                  animate={{ rotate: [0, 5, -5, 0] }}
                  transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
                >
                  <div className="bg-gradient-to-br from-amber-200 to-orange-300 p-4 rounded-2xl shadow-lg border-2 border-amber-300/50">
                    <Coffee className="h-10 w-10 text-amber-800" />
                  </div>
                  
                  {/* Steam effects */}
                  {[...Array(3)].map((_, i) => (
                    <motion.div
                      key={i}
                      animate={{
                        y: [-5, -20, -5],
                        opacity: [0.8, 0.3, 0.8],
                        scale: [1, 1.2, 1]
                      }}
                      transition={{
                        duration: 2 + i * 0.3,
                        repeat: Infinity,
                        ease: "easeInOut",
                        delay: i * 0.4
                      }}
                      className="absolute"
                      style={{
                        left: `${30 + i * 15}%`,
                        top: '-10px'
                      }}
                    >
                      <div className="w-1 h-4 bg-gradient-to-t from-amber-300/60 to-transparent rounded-full"></div>
                    </motion.div>
                  ))}
                </motion.div>
                
                <div>
                  <motion.h1 
                    className="text-5xl font-bold bg-gradient-to-r from-amber-800 via-orange-700 to-amber-800 bg-clip-text text-transparent"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.3 }}
                  >
                    HabitCafe
                  </motion.h1>
                  <motion.p 
                    className="text-lg text-amber-600 font-medium flex items-center"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.5 }}
                  >
                    Where habits brew into rewards
                    <motion.span
                      animate={{ scale: [1, 1.3, 1] }}
                      transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                      className="ml-2"
                    >
                      <Heart className="h-4 w-4 text-red-400" />
                    </motion.span>
                  </motion.p>
                </div>
              </motion.div>

              {/* Welcome message */}
              <motion.div 
                className="space-y-6"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6, duration: 0.8 }}
              >
                <h2 className="text-4xl lg:text-5xl font-bold text-gray-800 leading-tight">
                  Sip, Savor,
                  <br />
                  <span className="bg-gradient-to-r from-amber-600 via-orange-600 to-amber-600 bg-clip-text text-transparent">
                    & Succeed
                  </span>
                </h2>

                <p className="text-xl text-amber-700 leading-relaxed max-w-md">
                  Welcome to your personal habit cafe. Every small action brews into something beautiful. 
                  Start your journey with a warm cup of motivation.
                </p>
              </motion.div>

              {/* Feature cards */}
              <motion.div 
                className="grid grid-cols-1 sm:grid-cols-3 gap-6 pt-8"
                initial={{ opacity: 0, y: 40 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.8, duration: 0.8 }}
              >
                {[
                  { icon: Coffee, title: "Brew Goals", desc: "Set meaningful rewards that motivate you", color: "amber" },
                  { icon: Cookie, title: "Daily Habits", desc: "Small consistent actions that add up", color: "orange" },
                  { icon: Sparkles, title: "Sweet Success", desc: "Celebrate every milestone achieved", color: "yellow" }
                ].map((feature, index) => (
                  <motion.div
                    key={feature.title}
                    className={`text-center p-6 bg-gradient-to-br from-${feature.color}-100/70 to-${feature.color}-200/70 backdrop-blur-sm rounded-2xl border border-${feature.color}-200/50 shadow-lg`}
                    whileHover={{ 
                      scale: 1.05, 
                      rotate: index % 2 === 0 ? 2 : -2,
                      boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1)"
                    }}
                    transition={{ type: "spring", stiffness: 300, damping: 20 }}
                  >
                    <motion.div
                      animate={{ 
                        rotate: [0, 10, -10, 0],
                        scale: [1, 1.1, 1]
                      }}
                      transition={{ 
                        duration: 3 + index,
                        repeat: Infinity,
                        ease: "easeInOut",
                        delay: index * 0.5
                      }}
                    >
                      <feature.icon className={`h-10 w-10 text-${feature.color}-600 mx-auto mb-3`} />
                    </motion.div>
                    <h3 className="font-bold text-gray-800 mb-2">{feature.title}</h3>
                    <p className="text-sm text-gray-600 leading-relaxed">{feature.desc}</p>
                  </motion.div>
                ))}
              </motion.div>
            </div>
          </motion.div>

          {/* Right side - Auth Forms */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.2, ease: "easeOut" }}
            className="w-full flex justify-center"
          >
            <div className="w-full max-w-md">
              <motion.div 
                className="bg-white/90 backdrop-blur-md rounded-3xl shadow-2xl p-8 border-2 border-amber-200/50 relative overflow-hidden"
                whileHover={{ 
                  boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.15)",
                  scale: 1.01
                }}
                transition={{ type: "spring", stiffness: 300, damping: 20 }}
              >
                {/* Decorative elements */}
                <div className="absolute top-4 right-4 opacity-20">
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                  >
                    <Sparkles className="h-6 w-6 text-amber-400" />
                  </motion.div>
                </div>
                
                <div className="absolute bottom-4 left-4 opacity-20">
                  <motion.div
                    animate={{ rotate: [0, 10, -10, 0] }}
                    transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <Cookie className="h-5 w-5 text-orange-400" />
                  </motion.div>
                </div>

                {/* Mobile branding */}
                <div className="lg:hidden text-center mb-8">
                  <motion.div 
                    className="flex items-center justify-center space-x-3 mb-4"
                    whileHover={{ scale: 1.05 }}
                  >
                    <motion.div
                      animate={{ rotate: [0, 5, -5, 0] }}
                      transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                    >
                      <Coffee className="h-8 w-8 text-amber-600" />
                    </motion.div>
                    <div>
                      <h1 className="text-2xl font-bold bg-gradient-to-r from-amber-800 to-orange-700 bg-clip-text text-transparent">
                        HabitCafe
                      </h1>
                      <p className="text-amber-600 text-sm font-medium">
                        Where habits brew ☕
                      </p>
                    </div>
                  </motion.div>
                </div>

                {/* Form container */}
                <AnimatePresence mode="wait">
                  {isSignUp ? (
                    <motion.div
                      key="signup"
                      initial={{ opacity: 0, x: 30, rotateY: -10 }}
                      animate={{ opacity: 1, x: 0, rotateY: 0 }}
                      exit={{ opacity: 0, x: -30, rotateY: 10 }}
                      transition={{ 
                        duration: 0.4,
                        type: "spring",
                        stiffness: 300,
                        damping: 25
                      }}
                    >
                      <SignUpForm onSwitchToLogin={handleSwitchToLogin} />
                    </motion.div>
                  ) : (
                    <motion.div
                      key="login"
                      initial={{ opacity: 0, x: -30, rotateY: 10 }}
                      animate={{ opacity: 1, x: 0, rotateY: 0 }}
                      exit={{ opacity: 0, x: 30, rotateY: -10 }}
                      transition={{ 
                        duration: 0.4,
                        type: "spring",
                        stiffness: 300,
                        damping: 25
                      }}
                    >
                      <LoginForm onSwitchToSignUp={handleSwitchToSignUp} />
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>

              {/* Social proof */}
              <motion.div 
                className="text-center mt-8 text-sm text-amber-700"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 1.2 }}
              >
                <motion.p
                  animate={{ opacity: [0.7, 1, 0.7] }}
                  transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                >
                  Join our cozy community of habit builders
                </motion.p>
                <div className="flex items-center justify-center space-x-1 mt-3">
                  {[...Array(5)].map((_, i) => (
                    <motion.span 
                      key={i} 
                      className="text-yellow-400 text-lg"
                      animate={{ 
                        scale: [1, 1.2, 1],
                        rotate: [0, 10, 0]
                      }}
                      transition={{ 
                        duration: 0.5,
                        delay: i * 0.1,
                        repeat: Infinity,
                        repeatDelay: 3
                      }}
                    >
                      ★
                    </motion.span>
                  ))}
                  <span className="ml-3 text-amber-600 font-medium">
                    4.9/5 - Loved by cafe visitors
                  </span>
                </div>
              </motion.div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Background cafe ambiance */}
      <div className="fixed inset-0 -z-10 overflow-hidden">
        {/* Warm lighting effects */}
        <motion.div
          animate={{
            opacity: [0.1, 0.3, 0.1],
            scale: [1, 1.1, 1]
          }}
          transition={{
            duration: 8,
            repeat: Infinity,
            ease: "easeInOut",
          }}
          className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-radial from-amber-200/30 to-transparent rounded-full blur-3xl"
        />
        <motion.div
          animate={{
            opacity: [0.1, 0.25, 0.1],
            scale: [1, 1.2, 1]
          }}
          transition={{
            duration: 10,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 2
          }}
          className="absolute top-3/4 right-1/4 w-80 h-80 bg-gradient-radial from-orange-200/30 to-transparent rounded-full blur-3xl"
        />
        <motion.div
          animate={{
            opacity: [0.1, 0.2, 0.1],
            scale: [1, 1.15, 1]
          }}
          transition={{
            duration: 12,
            repeat: Infinity,
            ease: "easeInOut",
            delay: 4
          }}
          className="absolute bottom-1/4 left-1/2 w-72 h-72 bg-gradient-radial from-yellow-200/30 to-transparent rounded-full blur-3xl"
        />
      </div>
    </div>
  );
};
</file>

<file path="src/components/auth/LoginForm.tsx">
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { toast } from "react-hot-toast";
import { motion } from "framer-motion";
import { Coffee, Heart, LogIn, Eye, EyeOff, Mail, Lock } from "lucide-react";

interface LoginFormProps {
  onSwitchToSignUp: () => void;
}

export const LoginForm: React.FC<LoginFormProps> = ({ onSwitchToSignUp }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [focusedField, setFocusedField] = useState<string | null>(null);
  const { signIn } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) {
      toast.error("Please fill in all fields");
      return;
    }

    setLoading(true);
    try {
      await signIn(email, password);
      toast.success("Welcome back to the cafe! ☕");
    } catch (error: any) {
      toast.error(error.message || "Invalid email or password");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md">
      {/* Header */}
      <motion.div 
        className="text-center mb-8"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <motion.div
          className="flex items-center justify-center mb-4"
          whileHover={{ scale: 1.05 }}
        >
          <motion.div
            animate={{ rotate: [0, 5, -5, 0] }}
            transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
            className="mr-3"
          >
            <Coffee className="h-8 w-8 text-amber-600" />
          </motion.div>
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Welcome Back!</h1>
            <motion.p 
              className="text-amber-600 flex items-center justify-center"
              animate={{ opacity: [0.7, 1, 0.7] }}
              transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
            >
              Your favorite table is waiting
              <Heart className="h-4 w-4 text-red-400 ml-2" />
            </motion.p>
          </div>
        </motion.div>
      </motion.div>

      {/* Form */}
      <motion.form 
        onSubmit={handleSubmit} 
        className="space-y-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        {/* Email Field */}
        <motion.div
          whileHover={{ scale: 1.01 }}
          transition={{ type: "spring", stiffness: 400, damping: 25 }}
        >
          <label
            htmlFor="email"
            className="block text-sm font-medium text-amber-800 mb-2 flex items-center"
          >
            <Mail className="h-4 w-4 mr-2" />
            Email Address
          </label>
          <div className="relative">
            <motion.input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              onFocus={() => setFocusedField("email")}
              onBlur={() => setFocusedField(null)}
              className={`w-full px-4 py-4 pl-12 border-2 rounded-2xl transition-all duration-300 bg-white/80 backdrop-blur-sm ${
                focusedField === "email"
                  ? "border-amber-400 shadow-lg ring-4 ring-amber-100"
                  : "border-amber-200 hover:border-amber-300"
              } focus:outline-none`}
              placeholder="your.email@cafe.com"
              required
              whileFocus={{ scale: 1.02 }}
            />
            <motion.div 
              className="absolute left-4 top-1/2 transform -translate-y-1/2"
              animate={{ 
                scale: focusedField === "email" ? 1.1 : 1,
                color: focusedField === "email" ? "#d97706" : "#92400e"
              }}
            >
              <Mail className="h-5 w-5" />
            </motion.div>
          </div>
        </motion.div>

        {/* Password Field */}
        <motion.div
          whileHover={{ scale: 1.01 }}
          transition={{ type: "spring", stiffness: 400, damping: 25 }}
        >
          <label
            htmlFor="password"
            className="block text-sm font-medium text-amber-800 mb-2 flex items-center"
          >
            <Lock className="h-4 w-4 mr-2" />
            Password
          </label>
          <div className="relative">
            <motion.input
              id="password"
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onFocus={() => setFocusedField("password")}
              onBlur={() => setFocusedField(null)}
              className={`w-full px-4 py-4 pl-12 pr-12 border-2 rounded-2xl transition-all duration-300 bg-white/80 backdrop-blur-sm ${
                focusedField === "password"
                  ? "border-amber-400 shadow-lg ring-4 ring-amber-100"
                  : "border-amber-200 hover:border-amber-300"
              } focus:outline-none`}
              placeholder="Your secret blend..."
              required
              minLength={6}
              whileFocus={{ scale: 1.02 }}
            />
            <motion.div 
              className="absolute left-4 top-1/2 transform -translate-y-1/2"
              animate={{ 
                scale: focusedField === "password" ? 1.1 : 1,
                color: focusedField === "password" ? "#d97706" : "#92400e"
              }}
            >
              <Lock className="h-5 w-5" />
            </motion.div>
            <motion.button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 text-amber-600 hover:text-amber-800 transition-colors"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
            </motion.button>
          </div>
        </motion.div>

        {/* Submit Button */}
        <motion.button
          type="submit"
          disabled={loading}
          className="group relative w-full bg-gradient-to-r from-amber-400 via-orange-400 to-amber-400 hover:from-amber-500 hover:via-orange-500 hover:to-amber-500 text-white py-4 px-6 rounded-2xl font-semibold text-lg transition-all duration-300 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed overflow-hidden"
          whileHover={{ scale: 1.02, y: -2 }}
          whileTap={{ scale: 0.98 }}
          animate={loading ? { opacity: 0.7 } : { opacity: 1 }}
        >
          {/* Button background animation */}
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-400 opacity-0 group-hover:opacity-100"
            initial={{ x: "-100%" }}
            whileHover={{ x: "0%" }}
            transition={{ duration: 0.3 }}
          />
          
          <div className="relative flex items-center justify-center space-x-3">
            {loading ? (
              <>
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  className="relative"
                >
                  <Coffee className="h-6 w-6" />
                  <motion.div
                    animate={{
                      y: [-2, -6, -2],
                      opacity: [0.6, 0.3, 0.6],
                    }}
                    transition={{
                      duration: 1,
                      repeat: Infinity,
                      ease: "easeInOut",
                    }}
                    className="absolute -top-1 left-1/2 transform -translate-x-1/2"
                  >
                    <div className="w-1 h-2 bg-white/60 rounded-full"></div>
                  </motion.div>
                </motion.div>
                <span>Brewing your session...</span>
              </>
            ) : (
              <>
                <LogIn className="h-6 w-6 group-hover:scale-110 transition-transform" />
                <span>Welcome Back to the Cafe</span>
                <motion.span
                  animate={{ scale: [1, 1.2, 1] }}
                  transition={{ duration: 1.5, repeat: Infinity, ease: "easeInOut" }}
                >
                  ☕
                </motion.span>
              </>
            )}
          </div>
        </motion.button>
      </motion.form>

      {/* Footer */}
      <motion.div 
        className="mt-8 text-center space-y-4"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.4 }}
      >
        <motion.button
          onClick={onSwitchToSignUp}
          className="text-amber-600 hover:text-amber-800 font-medium transition-colors relative group"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <span className="relative">
            New to our cafe? Join our community
            <motion.div
              className="absolute bottom-0 left-0 w-full h-0.5 bg-amber-400 origin-left"
              initial={{ scaleX: 0 }}
              whileHover={{ scaleX: 1 }}
              transition={{ duration: 0.3 }}
            />
          </span>
        </motion.button>

        <motion.button 
          className="block text-sm text-amber-500 hover:text-amber-700 transition-colors mx-auto"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          Forgot your blend recipe?
        </motion.button>
      </motion.div>
    </div>
  );
};
</file>

<file path="src/components/auth/SignUpForm.tsx">
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { toast } from "react-hot-toast";

interface SignUpFormProps {
  onSwitchToLogin: () => void;
}

export const SignUpForm: React.FC<SignUpFormProps> = ({ onSwitchToLogin }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const { signUp } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !password || !confirmPassword) {
      toast.error("Please fill in all fields");
      return;
    }

    if (password !== confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    if (password.length < 6) {
      toast.error("Password must be at least 6 characters");
      return;
    }

    setLoading(true);
    try {
      await signUp(email, password);
      toast.success("Account created! Check your email to verify.");
    } catch (error: any) {
      toast.error(error.message || "Failed to create account");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          Create Account
        </h1>
        <p className="text-gray-600">
          Join HabitCrown and start earning rewards
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Email Address
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Enter your email"
            required
          />
        </div>

        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Create a password"
            required
            minLength={6}
          />
        </div>

        <div>
          <label
            htmlFor="confirmPassword"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Confirm Password
          </label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Confirm your password"
            required
            minLength={6}
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
        >
          {loading ? (
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              Creating Account...
            </div>
          ) : (
            "Create Account"
          )}
        </button>
      </form>

      <div className="mt-6 text-center">
        <button
          onClick={onSwitchToLogin}
          className="text-purple-600 hover:text-purple-700 font-medium transition-colors"
        >
          Already have an account? Sign in
        </button>
      </div>

      <div className="mt-6 text-xs text-gray-500 text-center">
        By creating an account, you agree to our Terms of Service and Privacy
        Policy
      </div>
    </div>
  );
};
</file>

<file path="src/components/habits/HabitForm.tsx">
import { useState } from "react";
import { useHabits } from "../../hooks/useHabits";
import { useHabitSuggestions } from "../../hooks/useHabitSuggestions";
import { HabitSuggestions } from "./HabitSuggestions";
import { X, Sparkles } from "lucide-react";
import { toast } from "react-hot-toast";

interface HabitFormProps {
  rewardId: string;
  onClose: () => void;
  habit?: any;
}

export const HabitForm = ({ rewardId, onClose, habit }: HabitFormProps) => {
  const [name, setName] = useState(habit?.name || "");
  const [pointsPerCompletion, setPointsPerCompletion] = useState(
    habit?.points_per_completion || 10
  );
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [suggestionInput, setSuggestionInput] = useState("");
  
  const { createHabit, updateHabit, isCreating, isUpdating } = useHabits();
  const {
    suggestions,
    isLoading: isSuggestionsLoading,
    error: suggestionsError,
    remainingRequests,
    totalRequests,
    refreshSuggestions,
    clearSuggestions,
  } = useHabitSuggestions();

  const isEditing = !!habit;
  const isLoading = isCreating || isUpdating;

  const handleSelectSuggestion = (suggestion: string) => {
    setName(suggestion);
    setShowSuggestions(false);
    setSuggestionInput("");
    clearSuggestions();
  };

  const handleToggleSuggestions = () => {
    if (showSuggestions) {
      setShowSuggestions(false);
      setSuggestionInput("");
      clearSuggestions();
    } else {
      setShowSuggestions(true);
      if (!suggestionInput.trim()) {
        refreshSuggestions("");
      }
    }
  };

  const handleGetSuggestions = () => {
    if (suggestionInput.trim()) {
      refreshSuggestions(suggestionInput.trim());
    }
  };

  const handleInputChange = (value: string) => {
    setSuggestionInput(value);
  };

  const handleSuggestionKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && suggestionInput.trim()) {
      handleGetSuggestions();
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!name.trim()) {
      toast.error("Please enter a habit name");
      return;
    }

    if (pointsPerCompletion < 1) {
      toast.error("Points per completion must be at least 1");
      return;
    }

    try {
      if (isEditing) {
        updateHabit({
          id: habit.id,
          updates: { name, points_per_completion: pointsPerCompletion },
        });
        toast.success("Habit updated successfully!");
      } else {
        createHabit({
          reward_id: rewardId,
          name,
          points_per_completion: pointsPerCompletion,
        });
        toast.success("Habit created successfully!");
      }
      onClose();
    } catch (error: any) {
      toast.error(error.message || "Something went wrong");
    }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-4">
        <h4 className="text-lg font-semibold text-gray-800">
          {isEditing ? "Edit Habit" : "Add New Habit"}
        </h4>
        <button
          onClick={onClose}
          className="p-1 hover:bg-gray-200 rounded-lg transition-colors"
        >
          <X className="h-4 w-4 text-gray-500" />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <div className="flex items-center gap-2 mb-1">
            <label
              htmlFor="habitName"
              className="block text-sm font-medium text-gray-700"
            >
              Habit Name *
            </label>
            {!isEditing && (
              <button
                type="button"
                onClick={handleToggleSuggestions}
                className={`group relative p-1 rounded transition-colors ${
                  showSuggestions 
                    ? "text-purple-700 bg-purple-100" 
                    : "text-purple-600 hover:text-purple-700 hover:bg-purple-50"
                }`}
                title={showSuggestions ? "Hide AI suggestions" : "Get AI suggestions"}
              >
                <Sparkles className="h-4 w-4" />
                <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10">
                  {showSuggestions ? "Hide suggestions" : "Get AI suggestions"}
                </div>
              </button>
            )}
          </div>
          <input
            id="habitName"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="e.g., Walk 10,000 steps daily, Read 10 pages before bed"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors text-sm"
            required
          />

          {/* Inline AI Suggestions Section */}
          {showSuggestions && !isEditing && (
            <div className="mt-3 p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-2">
                  <Sparkles className="h-4 w-4 text-purple-600" />
                  <span className="text-sm font-medium text-purple-900">AI Habit Suggestions</span>
                </div>
                <span className="text-xs text-purple-600 bg-purple-100 px-2 py-1 rounded-full">
                  {remainingRequests}/{totalRequests} left today
                </span>
              </div>
              
              <div className="flex gap-2 mb-3">
                <input
                  type="text"
                  value={suggestionInput}
                  onChange={(e) => handleInputChange(e.target.value)}
                  onKeyPress={handleSuggestionKeyPress}
                  className="flex-1 px-3 py-2 border border-purple-200 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm"
                  placeholder="e.g., fitness, reading, nutrition..."
                />
                <button
                  type="button"
                  onClick={handleGetSuggestions}
                  disabled={isSuggestionsLoading || remainingRequests === 0 || !suggestionInput.trim()}
                  className="px-3 py-2 bg-purple-600 text-white text-sm rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-1"
                >
                  {isSuggestionsLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-white"></div>
                      <span className="hidden sm:inline">Getting...</span>
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-3 w-3" />
                      <span className="hidden sm:inline">Get Ideas</span>
                    </>
                  )}
                </button>
              </div>

              <HabitSuggestions
                suggestions={suggestions}
                isLoading={isSuggestionsLoading}
                isModelLoaded={true}
                error={suggestionsError}
                remainingRequests={remainingRequests}
                totalRequests={totalRequests}
                onSelectSuggestion={handleSelectSuggestion}
              />
            </div>
          )}
        </div>

        <div>
          <label
            htmlFor="points"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Points per Completion *
          </label>
          <input
            id="points"
            type="number"
            value={pointsPerCompletion}
            onChange={(e) => setPointsPerCompletion(Number(e.target.value))}
            min="1"
            max="1000"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors text-sm"
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            Points earned each time you complete this habit
          </p>
        </div>

        <div className="flex items-center space-x-2 pt-2">
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all text-sm"
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {isEditing ? "Updating..." : "Adding..."}
              </div>
            ) : isEditing ? (
              "Update Habit"
            ) : (
              "Add Habit"
            )}
          </button>

          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};
</file>

<file path="src/components/layout/Header.tsx">
import { useAuth } from "../../hooks/useAuth";
import { LogOut, Coffee, User, Sparkles, Heart } from "lucide-react";
import { toast } from "react-hot-toast";
import { AnimatePresence, motion } from "framer-motion";
import { useState } from "react";

export const Header = () => {
  const { user, signOut } = useAuth();
  const [isHovered, setIsHovered] = useState(false);

  const handleSignOut = async () => {
    try {
      await signOut();
      toast.success("See you soon! ☕");
    } catch (error: any) {
      toast.error(error.message || "Failed to sign out");
    }
  };

  return (
    <motion.header 
      initial={{ y: -20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
      className="bg-gradient-to-r from-amber-100/80 via-orange-100/80 to-yellow-100/80 backdrop-blur-sm border-b border-amber-200/50 sticky top-0 z-50"
    >
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          {/* Logo Section */}
          <motion.div 
            className="flex items-center space-x-3"
            whileHover={{ scale: 1.02 }}
            transition={{ type: "spring", stiffness: 400 }}
          >
            <motion.div 
              className="relative"
              animate={{ rotate: [0, 5, -5, 0] }}
              transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
            >
              <div className="bg-gradient-to-br from-amber-200 to-orange-300 p-3 rounded-xl shadow-lg border border-amber-300/50">
                <Coffee className="h-6 w-6 text-amber-800" />
              </div>
              
              {/* Steam effect */}
              <motion.div
                animate={{
                  y: [-2, -8, -2],
                  opacity: [0.6, 0.3, 0.6],
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
                className="absolute -top-1 left-1/2 transform -translate-x-1/2"
              >
                <div className="w-1 h-2 bg-gradient-to-t from-amber-300/60 to-transparent rounded-full"></div>
              </motion.div>
              <motion.div
                animate={{
                  y: [-2, -10, -2],
                  opacity: [0.4, 0.2, 0.4],
                }}
                transition={{
                  duration: 2.5,
                  repeat: Infinity,
                  ease: "easeInOut",
                  delay: 0.3,
                }}
                className="absolute -top-2 left-1/2 transform -translate-x-2"
              >
                <div className="w-1 h-3 bg-gradient-to-t from-amber-300/40 to-transparent rounded-full"></div>
              </motion.div>
            </motion.div>
            
            <div>
              <motion.h1 
                className="text-xl font-bold bg-gradient-to-r from-amber-800 to-orange-700 bg-clip-text text-transparent"
                whileHover={{ scale: 1.05 }}
                transition={{ type: "spring", stiffness: 400 }}
              >
                HabitCafe
              </motion.h1>
              <motion.p 
                className="text-sm text-amber-600 flex items-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
              >
                Where habits brew 
                <motion.span
                  animate={{ scale: [1, 1.2, 1] }}
                  transition={{ duration: 1.5, repeat: Infinity, ease: "easeInOut" }}
                  className="ml-1"
                >
                  <Heart className="h-3 w-3 text-red-400 inline" />
                </motion.span>
              </motion.p>
            </div>
          </motion.div>

          {/* User Section */}
          <div className="flex items-center space-x-4">
            <motion.div 
              className="text-right hidden sm:block"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.4 }}
            >
              <p className="text-sm font-medium text-amber-800 flex items-center justify-end">
                <User className="h-4 w-4 mr-1" />
                {user?.email}
              </p>
              <motion.p 
                className="text-xs text-amber-600 flex items-center justify-end"
                animate={{ opacity: [0.7, 1, 0.7] }}
                transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
              >
                Welcome back, habit brewer! 
                <Sparkles className="h-3 w-3 ml-1 text-yellow-500" />
              </motion.p>
            </motion.div>
            
            <motion.button
              onClick={handleSignOut}
              onHoverStart={() => setIsHovered(true)}
              onHoverEnd={() => setIsHovered(false)}
              whileHover={{ scale: 1.05, rotate: 2 }}
              whileTap={{ scale: 0.95 }}
              className="group relative flex items-center space-x-2 px-4 py-2 bg-amber-200/60 hover:bg-amber-300/80 text-amber-800 rounded-xl transition-all duration-300 shadow-md hover:shadow-lg border border-amber-300/50"
            >
              <motion.div
                animate={isHovered ? { rotate: [0, 10, -10, 0] } : {}}
                transition={{ duration: 0.5 }}
              >
                <LogOut className="h-4 w-4" />
              </motion.div>
              <span className="hidden sm:inline font-medium">Sign Out</span>
              
              {/* Hover effect sparkles */}
              <AnimatePresence>
                {isHovered && (
                  <motion.div
                    initial={{ scale: 0, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0, opacity: 0 }}
                    className="absolute -top-1 -right-1"
                  >
                    <Sparkles className="h-3 w-3 text-yellow-500" />
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.button>
          </div>
        </div>
      </div>
      
      {/* Bottom border glow effect */}
      <motion.div
        animate={{
          opacity: [0.3, 0.6, 0.3],
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut",
        }}
        className="h-px bg-gradient-to-r from-transparent via-amber-300 to-transparent"
      />
    </motion.header>
  );
};
</file>

<file path="src/components/rewards/RewardCard.tsx">
import { useState } from "react";
import type { RewardWithHabits } from "../../types/database";
import { useRewards } from "../../hooks/useRewards";
import { useHabits } from "../../hooks/useHabits";
import { ProgressRing } from "../ui/ProgressRing";
import { HabitsList } from "../habits/HabitsList";
import { HabitForm } from "../habits/HabitForm";
import { ClaimRewardModal } from "./ClaimRewardModal";
import { RewardForm } from "./RewardForm";
import {
  Plus, 
  Edit, 
  Trash2, 
  Gift, 
  ChevronDown, 
  ChevronUp,
  Zap,
  Clock
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "react-hot-toast";

interface RewardCardProps {
  reward: RewardWithHabits;
}

export const RewardCard = ({ reward }: RewardCardProps) => {
  const [showHabitForm, setShowHabitForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showClaimModal, setShowClaimModal] = useState(false);
  const [isHabitsExpanded, setIsHabitsExpanded] = useState(true);
  
  const { deleteReward, isDeleting } = useRewards();
  const { habits } = useHabits(reward.id);

  const progressPercentage = Math.min(
    (reward.current_points / reward.target_points) * 100,
    100
  );
  const isComplete = reward.current_points >= reward.target_points;
  const canClaim = isComplete && !reward.is_claimed;

  const handleDelete = () => {
    if (
      window.confirm(
        "Are you sure you want to delete this reward? This will also delete all associated habits."
      )
    ) {
      deleteReward(reward.id);
      toast.success("Reward deleted successfully");
    }
  };

  const handleClaim = () => {
    if (canClaim) {
      setShowClaimModal(true);
    }
  };

  const toggleHabitsExpanded = () => {
    setIsHabitsExpanded(!isHabitsExpanded);
    if (showHabitForm && !isHabitsExpanded) {
      setShowHabitForm(false);
    }
  };

  // Determine card styling based on status
  const getCardStyling = () => {
    if (canClaim) {
      return "border-green-300 bg-gradient-to-br from-green-50 to-emerald-50 shadow-xl ring-2 ring-green-200 ring-opacity-50";
    }
    return "border-gray-200 hover:border-purple-200 hover:shadow-xl";
  };

  const getStatusIndicator = () => {
    if (canClaim) {
      return (
        <div className="flex items-center bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1 rounded-full text-xs font-medium">
          <Zap className="h-3 w-3 mr-1" />
          Ready to Claim!
        </div>
      );
    }
    return (
      <div className="flex items-center bg-gradient-to-r from-orange-500 to-amber-500 text-white px-3 py-1 rounded-full text-xs font-medium">
        <Clock className="h-3 w-3 mr-1" />
        In Progress
      </div>
    );
  };

  return (
    <>
      <motion.div
        whileHover={{ y: -2 }}
        className={`bg-white rounded-xl shadow-lg border-2 transition-all duration-300 ${getCardStyling()}`}
      >
        {/* Status Banner for Ready to Claim */}
        {canClaim && (
          <div className="bg-gradient-to-r from-green-500 to-emerald-500 text-white text-center py-2 rounded-t-xl">
            <div className="flex items-center justify-center space-x-2">
              <Zap className="h-4 w-4 animate-pulse" />
              <span className="font-medium text-sm">READY TO CLAIM!</span>
              <Zap className="h-4 w-4 animate-pulse" />
            </div>
          </div>
        )}

        <div className="p-6">
          <div className="flex items-start justify-between mb-4">
            <div className="flex-1">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-xl font-bold text-gray-800">{reward.title}</h3>
                {getStatusIndicator()}
              </div>
              {reward.description && (
                <p className="text-gray-600 text-sm mb-3">{reward.description}</p>
              )}
            </div>

            <div className="flex items-center space-x-2 ml-4">
              <button
                onClick={() => setShowEditForm(true)}
                className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                title="Edit reward"
              >
                <Edit className="h-4 w-4" />
              </button>
              <button
                onClick={handleDelete}
                disabled={isDeleting}
                className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
                title="Delete reward"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>

          <div className="flex items-center justify-between mb-6">
            <div className="flex-1 mr-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">Progress</span>
                <span className="text-sm text-gray-600">
                  {reward.current_points} / {reward.target_points} points
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${progressPercentage}%` }}
                  transition={{ duration: 0.5, ease: "easeOut" }}
                  className={`h-3 rounded-full ${
                    isComplete
                      ? "bg-gradient-to-r from-green-400 to-green-600"
                      : "bg-gradient-to-r from-purple-500 to-blue-500"
                  }`}
                />
              </div>
              <div className="flex items-center justify-between mt-1">
                <span className="text-xs text-gray-500">
                  {Math.round(progressPercentage)}% complete
                </span>
                <span className="text-xs text-gray-500">
                  {reward.target_points - reward.current_points} points to go
                </span>
              </div>
            </div>

            <ProgressRing
              progress={progressPercentage}
              size={60}
              strokeWidth={4}
              className={isComplete ? "text-green-500" : "text-purple-500"}
            />
          </div>

          {canClaim && (
            <motion.button
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleClaim}
              className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-3 px-4 rounded-lg font-medium hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl mb-4 flex items-center justify-center space-x-2"
            >
              <Gift className="h-5 w-5" />
              <span>Claim Reward!</span>
            </motion.button>
          )}

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <button
                onClick={toggleHabitsExpanded}
                className="flex items-center space-x-2 text-lg font-semibold text-gray-800 hover:text-purple-600 transition-colors group"
              >
                <span>Habits</span>
                <span className="text-gray-500 group-hover:text-purple-500 transition-colors">
                  ({habits.length})
                </span>
                {isHabitsExpanded ? (
                  <ChevronUp className="h-4 w-4 text-gray-400 group-hover:text-purple-500 transition-colors" />
                ) : (
                  <ChevronDown className="h-4 w-4 text-gray-400 group-hover:text-purple-500 transition-colors" />
                )}
              </button>
              
              {!reward.is_claimed && isHabitsExpanded && (
                <button
                  onClick={() => setShowHabitForm(true)}
                  className="flex items-center space-x-1 text-purple-600 hover:text-purple-700 text-sm font-medium transition-colors"
                >
                  <Plus className="h-4 w-4" />
                  <span>Add Habit</span>
                </button>
              )}
            </div>

            <AnimatePresence>
              {isHabitsExpanded && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: "auto" }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.3, ease: "easeInOut" }}
                  className="overflow-hidden"
                >
                  <div className="space-y-4">
                    {showHabitForm && (
                      <motion.div
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        className="bg-gray-50 rounded-lg p-4"
                      >
                        <HabitForm
                          rewardId={reward.id}
                          onClose={() => setShowHabitForm(false)}
                        />
                      </motion.div>
                    )}

                    <HabitsList habits={habits} disabled={reward.is_claimed} />

                    {!showHabitForm && habits.length === 0 && !reward.is_claimed && (
                      <div className="text-center py-4">
                        <button
                          onClick={() => setShowHabitForm(true)}
                          className="flex items-center justify-center mx-auto space-x-2 text-sm font-medium text-purple-600 hover:text-purple-800 bg-purple-50 hover:bg-purple-100 px-4 py-2 rounded-lg transition-colors"
                        >
                          <Plus className="h-4 w-4" />
                          <span>Add Your First Habit</span>
                        </button>
                      </div>
                    )}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            {!isHabitsExpanded && habits.length > 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-sm text-gray-600 bg-gray-50 rounded-lg p-3"
              >
                <div className="flex items-center justify-between">
                  <span>
                    {habits.filter(h => h.completions_today > 0).length} of {habits.length} completed today
                  </span>
                  <div className="flex space-x-1">
                    {habits.slice(0, 3).map((habit, _index) => (
                      <div
                        key={habit.id}
                        className={`w-2 h-2 rounded-full ${
                          habit.completions_today > 0 
                            ? 'bg-green-400' 
                            : 'bg-gray-300'
                        }`}
                        title={habit.name}
                      />
                    ))}
                    {habits.length > 3 && (
                      <span className="text-xs text-gray-400 ml-1">+{habits.length - 3}</span>
                    )}
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        </div>
      </motion.div>

      {showEditForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <RewardForm
                reward={reward}
                onClose={() => setShowEditForm(false)}
              />
            </div>
          </div>
        </div>
      )}

      {showClaimModal && (
        <ClaimRewardModal
          reward={reward}
          onClose={() => setShowClaimModal(false)}
        />
      )}
    </>
  );
};
</file>

<file path="src/components/rewards/RewardForm.tsx">
import { useState } from "react";
import { useRewards } from "../../hooks/useRewards";
import { X } from "lucide-react";
import { toast } from "react-hot-toast";

interface RewardFormProps {
  onClose: () => void;
  reward?: any;
}

export const RewardForm = ({ onClose, reward }: RewardFormProps) => {
  const [title, setTitle] = useState(reward?.title || "");
  const [description, setDescription] = useState(reward?.description || "");
  const [targetPoints, setTargetPoints] = useState(
    reward?.target_points || 100
  );
  const { createReward, updateReward, isCreating, isUpdating } = useRewards();

  const isEditing = !!reward;
  const isLoading = isCreating || isUpdating;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!title.trim()) {
      toast.error("Please enter a reward title");
      return;
    }

    if (targetPoints < 1) {
      toast.error("Target points must be at least 1");
      return;
    }

    try {
      if (isEditing) {
        updateReward({
          id: reward.id,
          updates: { title, description, target_points: targetPoints },
        });
        toast.success("Reward updated successfully!");
      } else {
        createReward({
          title,
          description,
          target_points: targetPoints,
        });
        toast.success("Reward created successfully!");
      }
      onClose();
    } catch (error: any) {
      toast.error(error.message || "Something went wrong");
    }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-gray-800">
          {isEditing ? "Edit Reward" : "Create New Reward"}
        </h3>
        <button
          onClick={onClose}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <X className="h-5 w-5 text-gray-500" />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Reward Title *
          </label>
          <input
            id="title"
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="e.g., New smartphone, Weekend trip, etc."
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            required
          />
        </div>

        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Description
          </label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe your reward in detail..."
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors resize-none"
          />
        </div>

        <div>
          <label
            htmlFor="targetPoints"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Target Points *
          </label>
          <input
            id="targetPoints"
            type="number"
            value={targetPoints}
            onChange={(e) => setTargetPoints(Number(e.target.value))}
            min="1"
            max="10000"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            How many points needed to earn this reward?
          </p>
        </div>

        <div className="flex items-center space-x-3 pt-4">
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                {isEditing ? "Updating..." : "Creating..."}
              </div>
            ) : isEditing ? (
              "Update Reward"
            ) : (
              "Create Reward"
            )}
          </button>

          <button
            type="button"
            onClick={onClose}
            className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};
</file>

<file path="src/components/ui/ProgressRing.tsx">
interface ProgressRingProps {
  progress: number;
  size?: number;
  strokeWidth?: number;
  className?: string;
}

export const ProgressRing = ({
  progress,
  size = 80,
  strokeWidth = 6,
  className = "text-purple-500",
}: ProgressRingProps) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const strokeDashoffset = circumference - (progress / 100) * circumference;

  return (
    <div className="relative">
      <svg className="transform -rotate-90" width={size} height={size}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          className="text-gray-200"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          strokeLinecap="round"
          className={`transition-all duration-500 ease-out ${className}`}
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-sm font-bold text-gray-700">
          {Math.round(progress)}%
        </span>
      </div>
    </div>
  );
};
</file>

<file path="src/hooks/useAnalytics.tsx">
import { useQuery } from "@tanstack/react-query";
import analyticsService from "../services/analytics.service";

export const useAnalytics = () => {
  const dailyStatsQuery = useQuery({
    queryKey: ["analytics", "daily"],
    queryFn: () => analyticsService.getDailyStats(30),
    staleTime: 5 * 60 * 1000,
  });

  const weeklyStatsQuery = useQuery({
    queryKey: ["analytics", "weekly"],
    queryFn: () => analyticsService.getWeeklyStats(8),
    staleTime: 5 * 60 * 1000,
  });

  const streakQuery = useQuery({
    queryKey: ["analytics", "streak"],
    queryFn: analyticsService.getStreakData,
    staleTime: 5 * 60 * 1000,
  });

  const rewardOverviewQuery = useQuery({
    queryKey: ["analytics", "rewards"],
    queryFn: analyticsService.getRewardOverview,
    staleTime: 5 * 60 * 1000,
  });

  return {
    dailyStats: dailyStatsQuery.data ?? [],
    weeklyStats: weeklyStatsQuery.data ?? [],
    streakData: streakQuery.data ?? {
      currentStreak: 0,
      longestStreak: 0,
      lastCompletionDate: null,
    },
    rewardOverview: rewardOverviewQuery.data ?? {
      totalRewards: 0,
      activeRewards: 0,
      completedRewards: 0,
      claimedRewards: 0,
      totalPointsEarned: 0,
      totalTargetPoints: 0,
    },
    isLoading:
      dailyStatsQuery.isLoading ||
      weeklyStatsQuery.isLoading ||
      streakQuery.isLoading ||
      rewardOverviewQuery.isLoading,
    error:
      dailyStatsQuery.error ||
      weeklyStatsQuery.error ||
      streakQuery.error ||
      rewardOverviewQuery.error,
  };
};
</file>

<file path="src/hooks/useRewards.tsx">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "../services/supabase";
import type {
  Reward,
  RewardInsert,
  RewardUpdate,
  RewardWithHabits,
} from "../types/database";

const rewardsService = {
  async getRewards(): Promise<RewardWithHabits[]> {
    const { data, error } = await supabase
      .from("rewards")
      .select(
        `
        *,
        habits (*)
      `
      )
      .order("created_at", { ascending: false });

    if (error) throw error;
    return data as RewardWithHabits[];
  },

  async createReward(reward: RewardInsert): Promise<Reward> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("rewards")
      .insert({
        ...reward,
        user_id: user.id,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async updateReward(id: string, updates: RewardUpdate): Promise<Reward> {
    const { data, error } = await supabase
      .from("rewards")
      .update(updates)
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async deleteReward(id: string): Promise<void> {
    const { error } = await supabase.from("rewards").delete().eq("id", id);

    if (error) throw error;
  },

  async claimReward(id: string): Promise<Reward> {
    const { data, error } = await supabase
      .from("rewards")
      .update({ is_claimed: true })
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },
};

export const useRewards = () => {
  const queryClient = useQueryClient();

  const rewardsQuery = useQuery({
    queryKey: ["rewards"],
    queryFn: rewardsService.getRewards,
  });

  const createRewardMutation = useMutation({
    mutationFn: rewardsService.createReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const updateRewardMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: RewardUpdate }) =>
      rewardsService.updateReward(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const deleteRewardMutation = useMutation({
    mutationFn: rewardsService.deleteReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const claimRewardMutation = useMutation({
    mutationFn: rewardsService.claimReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  return {
    rewards: rewardsQuery.data ?? [],
    isLoading: rewardsQuery.isLoading,
    error: rewardsQuery.error,
    createReward: createRewardMutation.mutate,
    updateReward: updateRewardMutation.mutate,
    deleteReward: deleteRewardMutation.mutate,
    claimReward: claimRewardMutation.mutate,
    isCreating: createRewardMutation.isPending,
    isUpdating: updateRewardMutation.isPending,
    isDeleting: deleteRewardMutation.isPending,
    isClaiming: claimRewardMutation.isPending,
  };
};
</file>

<file path="src/services/analytics.service.ts">
import { supabase } from "./supabase";

export interface DailyStats {
  date: string;
  completions: number;
  pointsEarned: number;
  totalHabits: number;
  completionRate: number;
}

export interface WeeklyStats {
  week: string;
  completions: number;
  pointsEarned: number;
  averageCompletionRate: number;
}

export interface StreakData {
  currentStreak: number;
  longestStreak: number;
  lastCompletionDate: string | null;
}

export interface RewardOverview {
  totalRewards: number;
  activeRewards: number;
  completedRewards: number;
  claimedRewards: number;
  totalPointsEarned: number;
  totalTargetPoints: number;
}

const analyticsService = {
  async getDailyStats(days: number = 30): Promise<DailyStats[]> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const { data: completions, error } = await supabase
      .from("habit_completions")
      .select(
        `
        completed_at,
        points_earned,
        habit_id,
        habits!inner(user_id)
      `
      )
      .eq("habits.user_id", user.id)
      .gte("completed_at", startDate.toISOString())
      .order("completed_at", { ascending: true });

    if (error) throw error;

    const { data: habits, error: habitsError } = await supabase
      .from("habits")
      .select("id, created_at")
      .eq("user_id", user.id);

    if (habitsError) throw habitsError;

    const dailyStatsMap = new Map<string, DailyStats>();

    for (let i = 0; i < days; i++) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split("T")[0];

      const habitsActiveOnDate = habits.filter(
        (habit) => new Date(habit.created_at) <= date
      ).length;

      dailyStatsMap.set(dateStr, {
        date: dateStr,
        completions: 0,
        pointsEarned: 0,
        totalHabits: habitsActiveOnDate,
        completionRate: 0,
      });
    }

    completions.forEach((completion) => {
      const date = completion.completed_at.split("T")[0];
      const dayStats = dailyStatsMap.get(date);
      if (dayStats) {
        dayStats.completions += 1;
        dayStats.pointsEarned += completion.points_earned;
      }
    });

    dailyStatsMap.forEach((stats, _date) => {
      if (stats.totalHabits > 0) {
        stats.completionRate = (stats.completions / stats.totalHabits) * 100;
      }
    });

    return Array.from(dailyStatsMap.values()).reverse();
  },

  async getWeeklyStats(weeks: number = 8): Promise<WeeklyStats[]> {
    const dailyStats = await this.getDailyStats(weeks * 7);
    const weeklyStats: WeeklyStats[] = [];

    for (let i = 0; i < weeks; i++) {
      const weekStart = new Date();
      weekStart.setDate(weekStart.getDate() - i * 7 - 6);
      weekStart.setHours(0, 0, 0, 0);

      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekEnd.getDate() + 6);
      weekEnd.setHours(23, 59, 59, 999);

      const weekData = dailyStats.filter((day) => {
        const dayDate = new Date(day.date);
        return dayDate >= weekStart && dayDate <= weekEnd;
      });

      const totalCompletions = weekData.reduce(
        (sum, day) => sum + day.completions,
        0
      );
      const totalPoints = weekData.reduce(
        (sum, day) => sum + day.pointsEarned,
        0
      );
      const averageCompletionRate =
        weekData.length > 0
          ? weekData.reduce((sum, day) => sum + day.completionRate, 0) /
            weekData.length
          : 0;

      weeklyStats.push({
        week: `${weekStart.toLocaleDateString()} - ${weekEnd.toLocaleDateString()}`,
        completions: totalCompletions,
        pointsEarned: totalPoints,
        averageCompletionRate,
      });
    }

    return weeklyStats.reverse();
  },

  async getStreakData(): Promise<StreakData> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data: completions, error } = await supabase
      .from("habit_completions")
      .select(
        `
        completed_at,
        habits!inner(user_id)
      `
      )
      .eq("habits.user_id", user.id)
      .order("completed_at", { ascending: false });

    if (error) throw error;

    if (completions.length === 0) {
      return {
        currentStreak: 0,
        longestStreak: 0,
        lastCompletionDate: null,
      };
    }

    const completionDates = Array.from(
      new Set(completions.map((c) => c.completed_at.split("T")[0]))
    )
      .sort()
      .reverse();

    let currentStreak = 0;
    let longestStreak = 0;
    let tempStreak = 0;

    const today = new Date().toISOString().split("T")[0];
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayStr = yesterday.toISOString().split("T")[0];

    if (completionDates[0] === today || completionDates[0] === yesterdayStr) {
      currentStreak = 1;
      tempStreak = 1;

      for (let i = 1; i < completionDates.length; i++) {
        const currentDate = new Date(completionDates[i - 1]);
        const nextDate = new Date(completionDates[i]);
        const daysDiff =
          (currentDate.getTime() - nextDate.getTime()) / (1000 * 60 * 60 * 24);

        if (daysDiff === 1) {
          currentStreak++;
          tempStreak++;
        } else {
          break;
        }
      }
    }

    tempStreak = 0;
    for (let i = 0; i < completionDates.length - 1; i++) {
      const currentDate = new Date(completionDates[i]);
      const nextDate = new Date(completionDates[i + 1]);
      const daysDiff =
        (currentDate.getTime() - nextDate.getTime()) / (1000 * 60 * 60 * 24);

      if (daysDiff === 1) {
        tempStreak++;
      } else {
        longestStreak = Math.max(longestStreak, tempStreak + 1);
        tempStreak = 0;
      }
    }
    longestStreak = Math.max(longestStreak, tempStreak + 1);
    longestStreak = Math.max(longestStreak, currentStreak);

    return {
      currentStreak,
      longestStreak,
      lastCompletionDate: completions[0]?.completed_at || null,
    };
  },

  async getRewardOverview(): Promise<RewardOverview> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data: rewards, error } = await supabase
      .from("rewards")
      .select("*")
      .eq("user_id", user.id);

    if (error) throw error;

    const totalRewards = rewards.length;
    const activeRewards = rewards.filter(
      (r) => !r.is_claimed && r.current_points < r.target_points
    ).length;
    const completedRewards = rewards.filter(
      (r) => r.current_points >= r.target_points
    ).length;
    const claimedRewards = rewards.filter((r) => r.is_claimed).length;
    const totalPointsEarned = rewards.reduce(
      (sum, r) => sum + r.current_points,
      0
    );
    const totalTargetPoints = rewards.reduce(
      (sum, r) => sum + r.target_points,
      0
    );

    return {
      totalRewards,
      activeRewards,
      completedRewards,
      claimedRewards,
      totalPointsEarned,
      totalTargetPoints,
    };
  },
};

export default analyticsService;
</file>

<file path="src/services/supabase.ts">
import { createClient } from "@supabase/supabase-js";
import type { Database } from "../types/database";

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Missing Supabase environment variables");
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

export const getUser = async () => {
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();
  if (error) throw error;
  return user;
};

export const signOut = async () => {
  const { error } = await supabase.auth.signOut();
  if (error) throw error;
};

export const signInWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });
  if (error) throw error;
  return data;
};

export const signUpWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
  });
  if (error) throw error;
  return data;
};
</file>

<file path="src/types/database.ts">
export interface Database {
  public: {
    Tables: {
      rewards: {
        Row: {
          id: string;
          user_id: string;
          title: string;
          description: string | null;
          target_points: number;
          current_points: number;
          is_claimed: boolean;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id?: string;
          title: string;
          description?: string | null;
          target_points?: number;
          current_points?: number;
          is_claimed?: boolean;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          title?: string;
          description?: string | null;
          target_points?: number;
          current_points?: number;
          is_claimed?: boolean;
          created_at?: string;
          updated_at?: string;
        };
      };
      habits: {
        Row: {
          id: string;
          user_id: string;
          reward_id: string;
          name: string;
          points_per_completion: number;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id?: string;
          reward_id: string;
          name: string;
          points_per_completion?: number;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          reward_id?: string;
          name?: string;
          points_per_completion?: number;
          created_at?: string;
          updated_at?: string;
        };
      };
      habit_completions: {
        Row: {
          id: string;
          habit_id: string;
          user_id: string;
          points_earned: number;
          completed_at: string;
        };
        Insert: {
          id?: string;
          habit_id: string;
          user_id?: string;
          points_earned: number;
          completed_at?: string;
        };
        Update: {
          id?: string;
          habit_id?: string;
          user_id?: string;
          points_earned?: number;
          completed_at?: string;
        };
      };
    };
  };
}

export type Reward = Database["public"]["Tables"]["rewards"]["Row"];
export type RewardInsert = Database["public"]["Tables"]["rewards"]["Insert"];
export type RewardUpdate = Database["public"]["Tables"]["rewards"]["Update"];

export type Habit = Database["public"]["Tables"]["habits"]["Row"];
export type HabitInsert = Database["public"]["Tables"]["habits"]["Insert"];
export type HabitUpdate = Database["public"]["Tables"]["habits"]["Update"];

export type HabitCompletion =
  Database["public"]["Tables"]["habit_completions"]["Row"];
export type HabitCompletionInsert =
  Database["public"]["Tables"]["habit_completions"]["Insert"];

export interface RewardWithHabits extends Reward {
  habits: Habit[];
}

export interface HabitWithCompletions extends Habit {
  habit_completions: HabitCompletion[];
  completions_today: number;
}

export interface User {
  id: string;
  email: string;
  created_at: string;
}

export interface AuthState {
  user: User | null;
  loading: boolean;
  error: string | null;
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { AuthProvider, useAuth } from "./hooks/useAuth";
import { AuthLayout } from "./components/auth/AuthLayout";
import { Dashboard } from "./components/layout/Dashboard";
import { Header } from "./components/layout/Header";
import { Toaster } from "react-hot-toast";
import { motion, AnimatePresence } from "framer-motion";
import { Coffee, Sparkles } from "lucide-react";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,
      refetchOnWindowFocus: false,
    },
  },
});

const LoadingScreen = () => (
  <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 flex items-center justify-center relative overflow-hidden">
    {/* Floating coffee beans */}
    <div className="absolute inset-0">
      {[...Array(12)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute"
          initial={{ 
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight,
            rotate: 0,
            opacity: 0.1
          }}
          animate={{ 
            y: [null, -20, 0],
            rotate: [0, 360],
            opacity: [0.1, 0.3, 0.1]
          }}
          transition={{
            duration: 3 + Math.random() * 2,
            repeat: Infinity,
            ease: "easeInOut",
            delay: i * 0.3
          }}
        >
          <Coffee className="h-4 w-4 text-amber-400" />
        </motion.div>
      ))}
    </div>
    
    <motion.div
      initial={{ scale: 0.8, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
      className="text-center"
    >
      <motion.div
        animate={{ rotate: [0, 5, -5, 0] }}
        transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        className="relative mb-6"
      >
        <div className="bg-gradient-to-br from-amber-100 to-orange-100 p-6 rounded-2xl shadow-lg border border-amber-200">
          <Coffee className="h-12 w-12 text-amber-600 mx-auto" />
          <motion.div
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 1, repeat: Infinity, ease: "easeInOut" }}
            className="absolute -top-1 -right-1"
          >
            <Sparkles className="h-4 w-4 text-yellow-500" />
          </motion.div>
        </div>
      </motion.div>
      
      <motion.div
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.3, duration: 0.5 }}
      >
        <h2 className="text-2xl font-bold text-amber-800 mb-2">Brewing Your Habits</h2>
        <p className="text-amber-600">Creating the perfect blend of motivation...</p>
      </motion.div>
      
      <motion.div
        animate={{ rotate: 360 }}
        transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
        className="mt-6"
      >
        <div className="w-8 h-8 border-3 border-amber-300 border-t-amber-600 rounded-full mx-auto"></div>
      </motion.div>
    </motion.div>
  </div>
);

const AppContent = () => {
  const { user, loading } = useAuth();

  if (loading) {
    return <LoadingScreen />;
  }

  if (!user) {
    return <AuthLayout />;
  }

  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
      className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 relative"
    >
      {/* Ambient background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Floating steam/smoke effect */}
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={`steam-${i}`}
            className="absolute rounded-full bg-gradient-to-t from-amber-100/30 to-transparent"
            style={{
              left: `${20 + i * 15}%`,
              top: `${80 + Math.sin(i) * 10}%`,
              width: `${15 + Math.random() * 10}px`,
              height: `${30 + Math.random() * 20}px`,
            }}
            animate={{
              y: [-20, -60, -20],
              opacity: [0.3, 0.6, 0.3],
              scale: [1, 1.1, 1],
            }}
            transition={{
              duration: 4 + Math.random() * 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 0.5,
            }}
          />
        ))}
        
        {/* Subtle sparkles */}
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={`sparkle-${i}`}
            className="absolute"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              scale: [0, 1, 0],
              rotate: [0, 180, 360],
              opacity: [0, 0.6, 0],
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 0.4,
            }}
          >
            <Sparkles className="h-2 w-2 text-yellow-400" />
          </motion.div>
        ))}
      </div>
      
      <Header />
      <main className="container mx-auto px-4 py-8 relative z-10">
        <Dashboard />
      </main>
    </motion.div>
  );
};

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <AppContent />
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#fef3c7',
              color: '#92400e',
              border: '1px solid #f59e0b',
              borderRadius: '12px',
              fontWeight: '500',
              boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
            },
            success: {
              style: {
                background: '#d1fae5',
                color: '#065f46',
                border: '1px solid #10b981',
              },
            },
            error: {
              style: {
                background: '#fed7d7',
                color: '#c53030',
                border: '1px solid #f56565',
              },
            },
          }}
        />
      </AuthProvider>
    </QueryClientProvider>
  );
}
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="structure.txt">
.
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── README.md
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   │   └── react.svg
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── structure.txt
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

3 directories, 16 files
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    headers: {
      "Cross-Origin-Embedder-Policy": "require-corp",
      "Cross-Origin-Opener-Policy": "same-origin",
    },
  },
  optimizeDeps: {
    exclude: ["@xenova/transformers"],
  },
  worker: {
    format: 'es'
  },
  define: {
    global: 'globalThis',
  },
  resolve: {
    alias: {
      'onnxruntime-web': 'onnxruntime-web/dist/ort.min.js'
    }
  },
  assetsInclude: ['**/*.wasm'],
});
</file>

<file path="src/components/habits/HabitsList.tsx">
import { useState } from "react";
import type { HabitWithCompletions } from "../../types/database";
import { useHabits } from "../../hooks/useHabits";
import { HabitForm } from "./HabitForm";
import { CheckCircle, Circle, Edit, Trash2 } from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "react-hot-toast";

interface HabitsListProps {
  habits: HabitWithCompletions[];
  disabled?: boolean;
}

export const HabitsList = ({ habits, disabled = false }: HabitsListProps) => {
  const [editingHabit, setEditingHabit] = useState<string | null>(null);
  const { completeHabit, deleteHabit, isCompleting, isDeleting } = useHabits();

  const handleToggleHabit = (habit: HabitWithCompletions) => {
    if (disabled) return;

    if (habit.completions_today > 0) {
      toast.success("Habit already completed today!");
      return;
    }

    completeHabit({
      habitId: habit.id,
      pointsEarned: habit.points_per_completion,
    });
    toast.success(`+${habit.points_per_completion} points earned!`);
  };

  const handleDeleteHabit = (habitId: string) => {
    if (window.confirm("Are you sure you want to delete this habit?")) {
      deleteHabit(habitId);
      toast.success("Habit deleted successfully");
    }
  };

  if (habits.length === 0) {
    return (
      <div className="text-center py-6 text-gray-500">
        <Circle className="h-8 w-8 mx-auto mb-2 text-gray-300" />
        <p className="text-sm">No habits added yet</p>
        <p className="text-xs">Add habits to start earning points!</p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {habits.map((habit) => (
        <motion.div
          key={habit.id}
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          className={`border rounded-lg p-3 transition-all ${
            habit.completions_today > 0
              ? "bg-green-50 border-green-200"
              : disabled
              ? "bg-gray-50 border-gray-200"
              : "bg-white border-gray-200 hover:border-purple-200"
          }`}
        >
          {editingHabit === habit.id ? (
            <HabitForm
              rewardId={habit.reward_id}
              habit={habit}
              onClose={() => setEditingHabit(null)}
            />
          ) : (
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3 flex-1">
                <button
                  onClick={() => handleToggleHabit(habit)}
                  disabled={
                    disabled || isCompleting || habit.completions_today > 0
                  }
                  className={`flex-shrink-0 transition-colors ${
                    habit.completions_today > 0
                      ? "text-green-500"
                      : disabled
                      ? "text-gray-300 cursor-not-allowed"
                      : "text-gray-400 hover:text-purple-500"
                  }`}
                >
                  {habit.completions_today > 0 ? (
                    <CheckCircle className="h-6 w-6" />
                  ) : (
                    <Circle className="h-6 w-6" />
                  )}
                </button>

                <div className="flex-1">
                  <h5
                    className={`font-medium ${
                      habit.completions_today > 0
                        ? "text-green-800 line-through"
                        : disabled
                        ? "text-gray-500"
                        : "text-gray-800"
                    }`}
                  >
                    {habit.name}
                  </h5>
                  <p className="text-xs text-gray-500">
                    {habit.points_per_completion} points per completion
                    {habit.completions_today > 0 && (
                      <span className="text-green-600 font-medium ml-2">
                        ✓ Completed today
                      </span>
                    )}
                  </p>
                </div>
              </div>

              {!disabled && (
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => setEditingHabit(habit.id)}
                    className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDeleteHabit(habit.id)}
                    disabled={isDeleting}
                    className="p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              )}
            </div>
          )}
        </motion.div>
      ))}
    </div>
  );
};
</file>

<file path="src/components/layout/Dashboard.tsx">
import { useState } from "react";
import { useRewards } from "../../hooks/useRewards";
import { RewardCard } from "../rewards/RewardCard";
import { CompletedRewardCard } from "../rewards/CompleteRewardCard";
import { RewardForm } from "../rewards/RewardForm";
import { Analytics } from "../analytics/Analytics";
import { 
  Plus, 
  BarChart3, 
  Coffee, 
  Target, 
  CheckCircle2,
  Clock,
  Zap,
  Sparkles,
  Heart,
  Cookie
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export const Dashboard = () => {
  const { rewards, isLoading } = useRewards();
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [activeTab, setActiveTab] = useState<"rewards" | "analytics">("rewards");
  const [rewardViewMode, setRewardViewMode] = useState<"active" | "completed" | "all">("active");

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          className="relative"
        >
          <Coffee className="h-8 w-8 text-amber-600" />
          <motion.div
            animate={{
              y: [-2, -6, -2],
              opacity: [0.6, 0.3, 0.6],
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              ease: "easeInOut",
            }}
            className="absolute -top-1 left-1/2 transform -translate-x-1/2"
          >
            <div className="w-1 h-2 bg-gradient-to-t from-amber-400/60 to-transparent rounded-full"></div>
          </motion.div>
        </motion.div>
      </div>
    );
  }

  const activeRewards = rewards.filter(reward => 
    !reward.is_claimed && reward.current_points < reward.target_points
  );
  const readyToClaimRewards = rewards.filter(reward => 
    !reward.is_claimed && reward.current_points >= reward.target_points
  );
  const completedRewards = rewards.filter(reward => reward.is_claimed);

  const getFilteredRewards = () => {
    switch (rewardViewMode) {
      case "active":
        return [...readyToClaimRewards, ...activeRewards];
      case "completed":
        return completedRewards;
      case "all":
        return [...readyToClaimRewards, ...activeRewards, ...completedRewards];
      default:
        return [...readyToClaimRewards, ...activeRewards];
    }
  };

  const filteredRewards = getFilteredRewards();

  return (
    <div className="space-y-8">
      {/* Tab Navigation */}
      <motion.div 
        className="flex items-center justify-between"
        initial={{ y: 20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
      >
        <div className="flex items-center space-x-1 bg-white/70 backdrop-blur-sm rounded-2xl border border-amber-200/50 p-2 shadow-lg">
          <motion.button
            onClick={() => setActiveTab("rewards")}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className={`flex items-center space-x-2 px-6 py-3 rounded-xl text-sm font-medium transition-all duration-300 ${
              activeTab === "rewards"
                ? "bg-gradient-to-r from-amber-200 to-orange-200 text-amber-800 shadow-md"
                : "text-amber-600 hover:text-amber-800 hover:bg-amber-50"
            }`}
          >
            <motion.div
              animate={activeTab === "rewards" ? { rotate: [0, 5, -5, 0] } : {}}
              transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
            >
              <Coffee className="h-4 w-4" />
            </motion.div>
            <span>My Rewards</span>
            {activeTab === "rewards" && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="w-2 h-2 bg-amber-600 rounded-full"
              />
            )}
          </motion.button>
          
          <motion.button
            onClick={() => setActiveTab("analytics")}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className={`flex items-center space-x-2 px-6 py-3 rounded-xl text-sm font-medium transition-all duration-300 ${
              activeTab === "analytics"
                ? "bg-gradient-to-r from-amber-200 to-orange-200 text-amber-800 shadow-md"
                : "text-amber-600 hover:text-amber-800 hover:bg-amber-50"
            }`}
          >
            <BarChart3 className="h-4 w-4" />
            <span>Progress</span>
            {activeTab === "analytics" && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="w-2 h-2 bg-amber-600 rounded-full"
              />
            )}
          </motion.button>
        </div>

        {activeTab === "rewards" && (
          <motion.button
            onClick={() => setShowCreateForm(true)}
            whileHover={{ scale: 1.05, rotate: 2 }}
            whileTap={{ scale: 0.95 }}
            initial={{ x: 20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="group relative flex items-center space-x-2 bg-gradient-to-r from-amber-400 to-orange-400 hover:from-amber-500 hover:to-orange-500 text-white px-6 py-3 rounded-2xl font-medium transition-all duration-300 shadow-lg hover:shadow-xl"
          >
            <motion.div
              animate={{ rotate: [0, 90, 0] }}
              transition={{ duration: 0.3 }}
              className="group-hover:animate-spin"
            >
              <Plus className="h-5 w-5" />
            </motion.div>
            <span>Brew New Reward</span>
            <motion.div
              animate={{ scale: [1, 1.2, 1] }}
              transition={{ duration: 1, repeat: Infinity, ease: "easeInOut" }}
            >
              <Sparkles className="h-4 w-4" />
            </motion.div>
          </motion.button>
        )}
      </motion.div>

      <AnimatePresence mode="wait">
        {activeTab === "rewards" ? (
          <motion.div
            key="rewards"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
            className="space-y-8"
          >
            {/* Stats Overview */}
            <motion.div 
              className="grid grid-cols-1 md:grid-cols-4 gap-4"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              <motion.div
                whileHover={{ scale: 1.02, rotate: 1 }}
                className="bg-gradient-to-br from-orange-100/80 to-amber-100/80 backdrop-blur-sm border border-orange-200/50 rounded-2xl p-6 shadow-lg"
              >
                <div className="flex items-center">
                  <motion.div 
                    className="bg-gradient-to-br from-orange-400 to-amber-500 p-3 rounded-xl mr-4 shadow-md"
                    animate={{ rotate: [0, 5, -5, 0] }}
                    transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <Clock className="h-5 w-5 text-white" />
                  </motion.div>
                  <div>
                    <motion.p 
                      className="text-2xl font-bold text-orange-800"
                      animate={{ scale: [1, 1.05, 1] }}
                      transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                    >
                      {activeRewards.length}
                    </motion.p>
                    <p className="text-sm text-orange-600 font-medium">Brewing</p>
                  </div>
                </div>
              </motion.div>

              <motion.div
                whileHover={{ scale: 1.02, rotate: -1 }}
                className="bg-gradient-to-br from-green-100/80 to-emerald-100/80 backdrop-blur-sm border border-green-200/50 rounded-2xl p-6 shadow-lg"
              >
                <div className="flex items-center">
                  <motion.div 
                    className="bg-gradient-to-br from-green-400 to-emerald-500 p-3 rounded-xl mr-4 shadow-md"
                    animate={{ scale: [1, 1.1, 1] }}
                    transition={{ duration: 1.5, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <Zap className="h-5 w-5 text-white" />
                  </motion.div>
                  <div>
                    <motion.p 
                      className="text-2xl font-bold text-green-800"
                      animate={{ scale: [1, 1.05, 1] }}
                      transition={{ duration: 2, repeat: Infinity, ease: "easeInOut", delay: 0.5 }}
                    >
                      {readyToClaimRewards.length}
                    </motion.p>
                    <p className="text-sm text-green-600 font-medium">Ready!</p>
                  </div>
                </div>
              </motion.div>

              <motion.div
                whileHover={{ scale: 1.02, rotate: 1 }}
                className="bg-gradient-to-br from-purple-100/80 to-pink-100/80 backdrop-blur-sm border border-purple-200/50 rounded-2xl p-6 shadow-lg"
              >
                <div className="flex items-center">
                  <motion.div 
                    className="bg-gradient-to-br from-purple-400 to-pink-500 p-3 rounded-xl mr-4 shadow-md"
                    animate={{ rotate: [0, 10, -10, 0] }}
                    transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <CheckCircle2 className="h-5 w-5 text-white" />
                  </motion.div>
                  <div>
                    <motion.p 
                      className="text-2xl font-bold text-purple-800"
                      animate={{ scale: [1, 1.05, 1] }}
                      transition={{ duration: 2, repeat: Infinity, ease: "easeInOut", delay: 1 }}
                    >
                      {completedRewards.length}
                    </motion.p>
                    <p className="text-sm text-purple-600 font-medium">Enjoyed</p>
                  </div>
                </div>
              </motion.div>

              <motion.div
                whileHover={{ scale: 1.02, rotate: -1 }}
                className="bg-gradient-to-br from-blue-100/80 to-indigo-100/80 backdrop-blur-sm border border-blue-200/50 rounded-2xl p-6 shadow-lg"
              >
                <div className="flex items-center">
                  <motion.div 
                    className="bg-gradient-to-br from-blue-400 to-indigo-500 p-3 rounded-xl mr-4 shadow-md"
                    animate={{ y: [0, -2, 0] }}
                    transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <Target className="h-5 w-5 text-white" />
                  </motion.div>
                  <div>
                    <motion.p 
                      className="text-2xl font-bold text-blue-800"
                      animate={{ scale: [1, 1.05, 1] }}
                      transition={{ duration: 2, repeat: Infinity, ease: "easeInOut", delay: 1.5 }}
                    >
                      {rewards.length}
                    </motion.p>
                    <p className="text-sm text-blue-600 font-medium">Total</p>
                  </div>
                </div>
              </motion.div>
            </motion.div>

            {/* Filter Tabs */}
            <motion.div 
              className="flex items-center justify-between"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
            >
              <div className="flex items-center space-x-2 bg-white/70 backdrop-blur-sm rounded-2xl p-2 border border-amber-200/50 shadow-md">
                {[
                  { mode: "active", icon: Clock, label: "Active", count: activeRewards.length + readyToClaimRewards.length },
                  { mode: "completed", icon: CheckCircle2, label: "Completed", count: completedRewards.length },
                  { mode: "all", icon: Coffee, label: "All", count: rewards.length }
                ].map(({ mode, icon: Icon, label, count }) => (
                  <motion.button
                    key={mode}
                    onClick={() => setRewardViewMode(mode as any)}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-xl text-sm font-medium transition-all duration-300 ${
                      rewardViewMode === mode
                        ? "bg-gradient-to-r from-amber-200 to-orange-200 text-amber-800 shadow-md"
                        : "text-amber-600 hover:text-amber-800 hover:bg-amber-50"
                    }`}
                  >
                    <Icon className="h-4 w-4" />
                    <span>{label} ({count})</span>
                    {rewardViewMode === mode && (
                      <motion.div
                        layoutId="filter-indicator"
                        className="w-2 h-2 bg-amber-600 rounded-full"
                      />
                    )}
                  </motion.button>
                ))}
              </div>

              {readyToClaimRewards.length > 0 && rewardViewMode === "active" && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  whileHover={{ scale: 1.02 }}
                  className="bg-gradient-to-r from-green-400 to-emerald-400 text-white px-4 py-2 rounded-2xl text-sm font-medium flex items-center space-x-2 shadow-lg"
                >
                  <motion.div
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                  >
                    <Zap className="h-4 w-4" />
                  </motion.div>
                  <span>{readyToClaimRewards.length} reward{readyToClaimRewards.length !== 1 ? 's' : ''} ready!</span>
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity, ease: "easeInOut" }}
                  >
                    <Sparkles className="h-3 w-3" />
                  </motion.div>
                </motion.div>
              )}
            </motion.div>

            <AnimatePresence>
              {showCreateForm && (
                <motion.div
                  initial={{ opacity: 0, y: -20, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                  transition={{ type: "spring", damping: 25, stiffness: 300 }}
                  className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-amber-200/50"
                >
                  <RewardForm onClose={() => setShowCreateForm(false)} />
                </motion.div>
              )}
            </AnimatePresence>

            {/* Section Headers and Content */}
            {rewardViewMode === "active" && (
              <div className="space-y-8">
                {/* Ready to Claim Section */}
                {readyToClaimRewards.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.6 }}
                  >
                    <div className="flex items-center mb-6">
                      <motion.div 
                        className="bg-gradient-to-br from-green-200 to-emerald-200 p-3 rounded-2xl mr-4 shadow-md border border-green-300/50"
                        animate={{ scale: [1, 1.05, 1] }}
                        transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                      >
                        <Zap className="h-6 w-6 text-green-700" />
                      </motion.div>
                      <div>
                        <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                          Ready to Enjoy! 
                          <motion.span
                            animate={{ rotate: [0, 10, -10, 0] }}
                            transition={{ duration: 1, repeat: Infinity, ease: "easeInOut", delay: 0.5 }}
                            className="ml-2"
                          >
                            <Cookie className="h-5 w-5 text-amber-600" />
                          </motion.span>
                        </h2>
                        <p className="text-green-600 text-sm flex items-center">
                          Your rewards are perfectly brewed 
                          <Heart className="h-3 w-3 text-red-400 ml-1" />
                        </p>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {readyToClaimRewards.map((reward, index) => (
                        <motion.div
                          key={reward.id}
                          initial={{ opacity: 0, scale: 0.9, y: 20 }}
                          animate={{ opacity: 1, scale: 1, y: 0 }}
                          transition={{ 
                            duration: 0.4, 
                            delay: index * 0.1,
                            type: "spring",
                            damping: 25,
                            stiffness: 300
                          }}
                        >
                          <RewardCard reward={reward} />
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}

                {/* In Progress Section */}
                {activeRewards.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.8 }}
                  >
                    <div className="flex items-center mb-6">
                      <motion.div 
                        className="bg-gradient-to-br from-orange-200 to-amber-200 p-3 rounded-2xl mr-4 shadow-md border border-orange-300/50"
                        animate={{ rotate: [0, 5, -5, 0] }}
                        transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                      >
                        <Clock className="h-6 w-6 text-orange-700" />
                      </motion.div>
                      <div>
                        <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                          Brewing in Progress 
                          <motion.span
                            animate={{ y: [0, -2, 0] }}
                            transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                            className="ml-2"
                          >
                            <Coffee className="h-5 w-5 text-amber-600" />
                          </motion.span>
                        </h2>
                        <p className="text-orange-600 text-sm">Keep nurturing these habits to unlock rewards</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {activeRewards.map((reward, index) => (
                        <motion.div
                          key={reward.id}
                          initial={{ opacity: 0, scale: 0.9, y: 20 }}
                          animate={{ opacity: 1, scale: 1, y: 0 }}
                          transition={{ 
                            duration: 0.4, 
                            delay: index * 0.1,
                            type: "spring",
                            damping: 25,
                            stiffness: 300
                          }}
                        >
                          <RewardCard reward={reward} />
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}

                {/* Empty State for Active */}
                {activeRewards.length === 0 && readyToClaimRewards.length === 0 && (
                  <motion.div 
                    className="text-center py-16"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                  >
                    <motion.div 
                      className="bg-gradient-to-br from-amber-100 to-orange-100 rounded-3xl w-32 h-32 flex items-center justify-center mx-auto mb-8 shadow-lg border border-amber-200"
                      animate={{ 
                        rotate: [0, 5, -5, 0],
                        scale: [1, 1.05, 1]
                      }}
                      transition={{ 
                        duration: 4, 
                        repeat: Infinity, 
                        ease: "easeInOut" 
                      }}
                    >
                      <Coffee className="h-16 w-16 text-amber-600" />
                      <motion.div
                        animate={{
                          y: [-4, -12, -4],
                          opacity: [0.6, 0.3, 0.6],
                        }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          ease: "easeInOut",
                        }}
                        className="absolute -top-2 left-1/2 transform -translate-x-1/2"
                      >
                        <div className="w-2 h-4 bg-gradient-to-t from-amber-400/60 to-transparent rounded-full"></div>
                      </motion.div>
                    </motion.div>
                    <h3 className="text-2xl font-bold text-gray-700 mb-4">
                      Your cafe is waiting! 
                    </h3>
                    <p className="text-gray-500 mb-8 max-w-md mx-auto">
                      Start your habit journey by brewing your first reward. Every great habit starts with a dream worth working for.
                    </p>
                    <motion.button
                      onClick={() => setShowCreateForm(true)}
                      whileHover={{ scale: 1.05, rotate: 2 }}
                      whileTap={{ scale: 0.95 }}
                      className="bg-gradient-to-r from-amber-400 to-orange-400 hover:from-amber-500 hover:to-orange-500 text-white px-8 py-4 rounded-2xl font-medium transition-all duration-300 shadow-lg hover:shadow-xl flex items-center space-x-2 mx-auto"
                    >
                      <Plus className="h-5 w-5" />
                      <span>Brew Your First Reward</span>
                      <Sparkles className="h-4 w-4" />
                    </motion.button>
                  </motion.div>
                )}
              </div>
            )}

            {/* Completed Rewards Section */}
            {rewardViewMode === "completed" && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                {completedRewards.length > 0 ? (
                  <>
                    <div className="flex items-center mb-6">
                      <motion.div 
                        className="bg-gradient-to-br from-purple-200 to-pink-200 p-3 rounded-2xl mr-4 shadow-md border border-purple-300/50"
                        animate={{ scale: [1, 1.1, 1] }}
                        transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
                      >
                        <Coffee className="h-6 w-6 text-purple-700" />
                      </motion.div>
                      <div>
                        <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                          Savored Rewards 
                          <motion.span
                            animate={{ rotate: [0, 360] }}
                            transition={{ duration: 3, repeat: Infinity, ease: "linear" }}
                            className="ml-2"
                          >
                            <Sparkles className="h-5 w-5 text-yellow-500" />
                          </motion.span>
                        </h2>
                        <p className="text-purple-600 text-sm">Your sweet achievements and memorable moments</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {completedRewards.map((reward, index) => (
                        <motion.div
                          key={reward.id}
                          initial={{ opacity: 0, scale: 0.9, y: 20 }}
                          animate={{ opacity: 1, scale: 1, y: 0 }}
                          transition={{ 
                            duration: 0.4, 
                            delay: index * 0.1,
                            type: "spring",
                            damping: 25,
                            stiffness: 300
                          }}
                        >
                          <CompletedRewardCard reward={reward} />
                        </motion.div>
                      ))}
                    </div>
                  </>
                ) : (
                  <motion.div 
                    className="text-center py-16"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                  >
                    <motion.div 
                      className="bg-gradient-to-br from-purple-100 to-pink-100 rounded-3xl w-32 h-32 flex items-center justify-center mx-auto mb-8 shadow-lg border border-purple-200"
                      animate={{ 
                        rotate: [0, 10, -10, 0],
                        scale: [1, 1.05, 1]
                      }}
                      transition={{ 
                        duration: 3, 
                        repeat: Infinity, 
                        ease: "easeInOut" 
                      }}
                    >
                      <Coffee className="h-16 w-16 text-purple-600" />
                    </motion.div>
                    <h3 className="text-2xl font-bold text-gray-700 mb-4">
                      No savored rewards yet
                    </h3>
                    <p className="text-gray-500 mb-8 max-w-md mx-auto">
                      Keep brewing your habits! Soon you'll have delicious rewards to celebrate and remember.
                    </p>
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* All Rewards View */}
            {rewardViewMode === "all" && filteredRewards.length > 0 && (
              <motion.div 
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                {filteredRewards.map((reward, index) => (
                  <motion.div
                    key={reward.id}
                    initial={{ opacity: 0, scale: 0.9, y: 20 }}
                    animate={{ opacity: 1, scale: 1, y: 0 }}
                    transition={{ 
                      duration: 0.4, 
                      delay: index * 0.05,
                      type: "spring",
                      damping: 25,
                      stiffness: 300
                    }}
                  >
                    {reward.is_claimed ? (
                      <CompletedRewardCard reward={reward} />
                    ) : (
                      <RewardCard reward={reward} />
                    )}
                  </motion.div>
                ))}
              </motion.div>
            )}
          </motion.div>
        ) : (
          <motion.div
            key="analytics"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            transition={{ duration: 0.3 }}
          >
            <Analytics />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};
</file>

<file path="src/components/rewards/ClaimRewardModal.tsx">
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useRewards } from "../../hooks/useRewards";
import type { Reward } from "../../types/database";
import { Trophy, Gift, Sparkles, X, PartyPopper } from "lucide-react";
import { toast } from "react-hot-toast";
import Confetti from "react-confetti";

interface ClaimRewardModalProps {
  reward: Reward;
  onClose: () => void;
}

export const ClaimRewardModal = ({
  reward,
  onClose,
}: ClaimRewardModalProps) => {
  const [showConfetti, setShowConfetti] = useState(false);
  const [claimed, setClaimed] = useState(false);
  const { claimReward, isClaiming } = useRewards();

  const handleClaim = async () => {
    try {
      claimReward(reward.id);
      setClaimed(true);
      setShowConfetti(true);
      toast.success("Congratulations! Reward claimed!");

      setTimeout(() => {
        setShowConfetti(false);
        setTimeout(onClose, 1000);
      }, 3000);
    } catch (error: any) {
      toast.error(error.message || "Failed to claim reward");
    }
  };

  const celebrationVariants = {
    initial: { scale: 0, rotate: -180, opacity: 0 },
    animate: {
      scale: [0, 1.2, 1],
      rotate: [180, 0],
      opacity: 1,
      transition: { duration: 0.6, ease: "easeOut" },
    },
    exit: { scale: 0, opacity: 0, transition: { duration: 0.3 } },
  };

  const sparkleVariants = {
    animate: {
      scale: [1, 1.2, 1],
      rotate: [0, 180, 360],
      transition: {
        duration: 2,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  return (
    <>
      {showConfetti && (
        <Confetti
          width={window.innerWidth}
          height={window.innerHeight}
          numberOfPieces={200}
          recycle={false}
          gravity={0.3}
        />
      )}

      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-8 text-center relative overflow-hidden"
        >
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="h-5 w-5" />
          </button>

          <AnimatePresence mode="wait">
            {!claimed ? (
              <motion.div
                key="claim"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-6"
              >
                <div className="relative">
                  <motion.div
                    animate={sparkleVariants.animate}
                    className="absolute -top-2 -right-2 text-yellow-400"
                  >
                    <Sparkles className="h-6 w-6" />
                  </motion.div>
                  <motion.div
                    animate={sparkleVariants.animate}
                    className="absolute -bottom-2 -left-2 text-purple-400"
                  >
                    <Sparkles className="h-5 w-5" />
                  </motion.div>

                  <div className="bg-gradient-to-br from-purple-100 to-blue-100 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                    <Gift className="h-10 w-10 text-purple-600" />
                  </div>
                </div>

                <div>
                  <h2 className="text-2xl font-bold text-gray-800 mb-2">
                    Congratulations! 🎉
                  </h2>
                  <p className="text-gray-600 mb-4">
                    You've reached your goal and can now claim your reward!
                  </p>

                  <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 mb-6">
                    <h3 className="font-bold text-lg text-gray-800 mb-2">
                      {reward.title}
                    </h3>
                    {reward.description && (
                      <p className="text-gray-600 text-sm">
                        {reward.description}
                      </p>
                    )}
                    <div className="mt-3 flex items-center justify-center space-x-2 text-sm text-purple-600">
                      <Trophy className="h-4 w-4" />
                      <span className="font-medium">
                        {reward.current_points} / {reward.target_points} points
                        completed
                      </span>
                    </div>
                  </div>
                </div>

                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleClaim}
                  disabled={isClaiming}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
                >
                  {isClaiming ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Claiming...</span>
                    </>
                  ) : (
                    <>
                      <PartyPopper className="h-6 w-6" />
                      <span>Claim My Reward!</span>
                    </>
                  )}
                </motion.button>
              </motion.div>
            ) : (
              <motion.div
                key="success"
                variants={celebrationVariants}
                initial="initial"
                animate="animate"
                exit="exit"
                className="space-y-6"
              >
                <motion.div
                  animate={{
                    rotate: [0, 10, -10, 0],
                    scale: [1, 1.1, 1],
                  }}
                  transition={{
                    duration: 0.5,
                    repeat: 2,
                    ease: "easeInOut",
                  }}
                  className="bg-gradient-to-br from-yellow-100 to-orange-100 rounded-full w-24 h-24 flex items-center justify-center mx-auto"
                >
                  <Trophy className="h-12 w-12 text-yellow-600" />
                </motion.div>

                <div>
                  <motion.h2
                    animate={{
                      scale: [1, 1.05, 1],
                    }}
                    transition={{
                      duration: 1,
                      repeat: 1,
                      ease: "easeInOut",
                    }}
                    className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-2"
                  >
                    Reward Claimed! 🎊
                  </motion.h2>
                  <p className="text-gray-600 text-lg">
                    You've earned it! Enjoy your {reward.title}
                  </p>
                </div>

                <motion.div
                  animate={{
                    y: [0, -5, 0],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut",
                  }}
                  className="text-4xl"
                >
                  🎉🎁🌟
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </>
  );
};
</file>

<file path="src/hooks/useAuth.tsx">
import { useState, useEffect, createContext, useContext } from "react";
import type { User } from "@supabase/supabase-js";
import { supabase } from "../services/supabase";

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getSession = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      setLoading(false);
    };

    getSession();

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) throw error;
  };

  const signUp = async (email: string, password: string) => {
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) throw error;
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  };

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
</file>

<file path="src/hooks/useHabits.tsx">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "../services/supabase";
import type {
  Habit,
  HabitInsert,
  HabitUpdate,
  HabitCompletion,
  HabitWithCompletions,
} from "../types/database";

const habitsService = {
  async getHabits(rewardId?: string): Promise<HabitWithCompletions[]> {
    let query = supabase
      .from("habits")
      .select(
        `
        *,
        habit_completions (*)
      `
      )
      .order("created_at", { ascending: false });

    if (rewardId) {
      query = query.eq("reward_id", rewardId);
    }

    const { data, error } = await query;

    if (error) throw error;

    const today = new Date().toDateString();

    return data.map((habit) => ({
      ...habit,
      completions_today: habit.habit_completions.filter(
        (completion: any) =>
          new Date(completion.completed_at).toDateString() === today
      ).length,
    })) as HabitWithCompletions[];
  },

  async createHabit(habit: HabitInsert): Promise<Habit> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("habits")
      .insert({
        ...habit,
        user_id: user.id,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async updateHabit(id: string, updates: HabitUpdate): Promise<Habit> {
    const { data, error } = await supabase
      .from("habits")
      .update(updates)
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async deleteHabit(id: string): Promise<void> {
    const { error } = await supabase.from("habits").delete().eq("id", id);

    if (error) throw error;
  },

  async completeHabit(
    habitId: string,
    pointsEarned: number
  ): Promise<HabitCompletion> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("habit_completions")
      .insert({
        habit_id: habitId,
        user_id: user.id,
        points_earned: pointsEarned,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async undoHabitCompletion(completionId: string): Promise<void> {
    const { error } = await supabase
      .from("habit_completions")
      .delete()
      .eq("id", completionId);

    if (error) throw error;
  },

  async getTodayCompletions(habitId: string): Promise<HabitCompletion[]> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const { data, error } = await supabase
      .from("habit_completions")
      .select("*")
      .eq("habit_id", habitId)
      .gte("completed_at", today.toISOString());

    if (error) throw error;
    return data;
  },
};

export const useHabits = (rewardId?: string) => {
  const queryClient = useQueryClient();

  const habitsQuery = useQuery({
    queryKey: ["habits", rewardId],
    queryFn: () => habitsService.getHabits(rewardId),
  });

  const createHabitMutation = useMutation({
    mutationFn: habitsService.createHabit,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const updateHabitMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: HabitUpdate }) =>
      habitsService.updateHabit(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
    },
  });

  const deleteHabitMutation = useMutation({
    mutationFn: habitsService.deleteHabit,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const completeHabitMutation = useMutation({
    mutationFn: ({
      habitId,
      pointsEarned,
    }: {
      habitId: string;
      pointsEarned: number;
    }) => habitsService.completeHabit(habitId, pointsEarned),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const undoCompletionMutation = useMutation({
    mutationFn: habitsService.undoHabitCompletion,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  return {
    habits: habitsQuery.data ?? [],
    isLoading: habitsQuery.isLoading,
    error: habitsQuery.error,
    createHabit: createHabitMutation.mutate,
    updateHabit: updateHabitMutation.mutate,
    deleteHabit: deleteHabitMutation.mutate,
    completeHabit: completeHabitMutation.mutate,
    undoCompletion: undoCompletionMutation.mutate,
    isCreating: createHabitMutation.isPending,
    isUpdating: updateHabitMutation.isPending,
    isDeleting: deleteHabitMutation.isPending,
    isCompleting: completeHabitMutation.isPending,
  };
};
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/crown-favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="HabitCrown - Build habits, earn rewards. Transform your daily habits into meaningful rewards and celebrate your achievements."
    />
    <meta name="theme-color" content="#8b5cf6" />

    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="HabitCrown - Earn Your Crown" />
    <meta
      property="og:description"
      content="Build habits, earn rewards. Transform your daily habits into meaningful rewards."
    />
    <meta property="og:image" content="/crown-social.png" />

    <title>HabitCrown - Earn Your Crown</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "habitcrown",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.8",
    "@tanstack/react-query": "^5.79.0",
    "framer-motion": "^12.15.0",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-confetti": "^6.4.0",
    "react-dom": "^19.1.0",
    "react-hot-toast": "^2.5.2",
    "recharts": "^2.15.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@tailwindcss/vite": "^4.1.8",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}
</file>

</files>
