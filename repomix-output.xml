This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules, public
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  assets/
    react.svg
  components/
    auth/
      AuthLayout.tsx
      LoginForm.tsx
      SignUpForm.tsx
    habits/
      HabitForm.tsx
      HabitsList.tsx
    layout/
      Dashboard.tsx
      Header.tsx
    rewards/
      ClaimRewardModal.tsx
      RewardCard.tsx
      RewardForm.tsx
    ui/
      ProgressRing.tsx
  hooks/
    useAuth.tsx
    useHabits.tsx
    useRewards.tsx
  services/
    supabase.ts
  types/
    database.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
structure.txt
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/auth/AuthLayout.tsx">
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { LoginForm } from "./LoginForm";
import { SignUpForm } from "./SignUpForm";
import { Trophy, Crown, Sparkles } from "lucide-react";

export const AuthLayout: React.FC = () => {
  const [isSignUp, setIsSignUp] = useState(false);

  const handleSwitchToSignUp = () => setIsSignUp(true);
  const handleSwitchToLogin = () => setIsSignUp(false);

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-6xl flex items-center justify-center">
        <div className="grid lg:grid-cols-2 gap-12 items-center w-full">
          {/* Left side - Branding */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="hidden lg:block text-center lg:text-left"
          >
            <div className="space-y-6">
              <div className="flex items-center justify-center lg:justify-start space-x-3">
                <div className="relative">
                  <Crown className="h-12 w-12 text-yellow-500" />
                  <Sparkles className="h-4 w-4 text-purple-400 absolute -top-1 -right-1 animate-pulse" />
                </div>
                <div>
                  <h1 className="text-4xl font-bold text-gray-800">
                    HabitCrown
                  </h1>
                  <p className="text-purple-600 font-medium">Earn Your Crown</p>
                </div>
              </div>

              <div className="space-y-4">
                <h2 className="text-3xl lg:text-4xl font-bold text-gray-800 leading-tight">
                  Build habits,
                  <br />
                  <span className="bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                    earn rewards
                  </span>
                </h2>

                <p className="text-lg text-gray-600 leading-relaxed">
                  Transform your daily habits into meaningful rewards. Set
                  goals, track progress, and celebrate your achievements with
                  the rewards you deserve.
                </p>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 pt-8">
                <div className="text-center p-4 bg-white/50 rounded-xl backdrop-blur-sm">
                  <Trophy className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                  <h3 className="font-semibold text-gray-800">Set Rewards</h3>
                  <p className="text-sm text-gray-600">
                    Define meaningful rewards for your goals
                  </p>
                </div>

                <div className="text-center p-4 bg-white/50 rounded-xl backdrop-blur-sm">
                  <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full mx-auto mb-2 flex items-center justify-center">
                    <span className="text-white font-bold text-sm">✓</span>
                  </div>
                  <h3 className="font-semibold text-gray-800">Track Habits</h3>
                  <p className="text-sm text-gray-600">
                    Complete daily habits to earn points
                  </p>
                </div>

                <div className="text-center p-4 bg-white/50 rounded-xl backdrop-blur-sm">
                  <Crown className="h-8 w-8 text-purple-500 mx-auto mb-2" />
                  <h3 className="font-semibold text-gray-800">Claim Crown</h3>
                  <p className="text-sm text-gray-600">
                    Celebrate when you reach your goals
                  </p>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Right side - Auth Forms */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="w-full flex justify-center"
          >
            <div className="w-full max-w-md">
              <div className="bg-white rounded-2xl shadow-2xl p-8 backdrop-blur-sm border border-white/20">
                {/* Mobile branding */}
                <div className="lg:hidden text-center mb-8">
                  <div className="flex items-center justify-center space-x-3 mb-4">
                    <Crown className="h-10 w-10 text-yellow-500" />
                    <div>
                      <h1 className="text-2xl font-bold text-gray-800">
                        HabitCrown
                      </h1>
                      <p className="text-purple-600 text-sm font-medium">
                        Earn Your Crown
                      </p>
                    </div>
                  </div>
                </div>

                <AnimatePresence mode="wait">
                  {isSignUp ? (
                    <motion.div
                      key="signup"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                    >
                      <SignUpForm onSwitchToLogin={handleSwitchToLogin} />
                    </motion.div>
                  ) : (
                    <motion.div
                      key="login"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                    >
                      <LoginForm onSwitchToSignUp={handleSwitchToSignUp} />
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Social proof */}
              <div className="text-center mt-6 text-sm text-gray-500">
                <p>Join thousands of users building better habits</p>
                <div className="flex items-center justify-center space-x-1 mt-2">
                  {[...Array(5)].map((_, i) => (
                    <span key={i} className="text-yellow-400">
                      ★
                    </span>
                  ))}
                  <span className="ml-2 text-gray-600">
                    4.9/5 from our users
                  </span>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Background decorations */}
      <div className="fixed inset-0 -z-10 overflow-hidden">
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-purple-200 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse"></div>
        <div
          className="absolute top-3/4 right-1/4 w-64 h-64 bg-blue-200 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse"
          style={{ animationDelay: "2s" }}
        ></div>
        <div
          className="absolute bottom-1/4 left-1/2 w-64 h-64 bg-indigo-200 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse"
          style={{ animationDelay: "4s" }}
        ></div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/auth/LoginForm.tsx">
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { toast } from "react-hot-toast";

interface LoginFormProps {
  onSwitchToSignUp: () => void;
}

export const LoginForm: React.FC<LoginFormProps> = ({ onSwitchToSignUp }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const { signIn } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email || !password) {
      toast.error("Please fill in all fields");
      return;
    }

    setLoading(true);
    try {
      await signIn(email, password);
      toast.success("Welcome back!");
    } catch (error: any) {
      toast.error(error.message || "Invalid email or password");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Welcome Back</h1>
        <p className="text-gray-600">Sign in to continue your reward journey</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Email Address
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Enter your email"
            required
          />
        </div>

        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Enter your password"
            required
            minLength={6}
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
        >
          {loading ? (
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              Signing In...
            </div>
          ) : (
            "Sign In"
          )}
        </button>
      </form>

      <div className="mt-6 text-center">
        <button
          onClick={onSwitchToSignUp}
          className="text-purple-600 hover:text-purple-700 font-medium transition-colors"
        >
          Don't have an account? Sign up
        </button>
      </div>

      <div className="mt-4 text-center">
        <button className="text-sm text-gray-500 hover:text-gray-700 transition-colors">
          Forgot your password?
        </button>
      </div>
    </div>
  );
};
</file>

<file path="src/components/auth/SignUpForm.tsx">
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { toast } from "react-hot-toast";

interface SignUpFormProps {
  onSwitchToLogin: () => void;
}

export const SignUpForm: React.FC<SignUpFormProps> = ({ onSwitchToLogin }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const { signUp } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !password || !confirmPassword) {
      toast.error("Please fill in all fields");
      return;
    }

    if (password !== confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    if (password.length < 6) {
      toast.error("Password must be at least 6 characters");
      return;
    }

    setLoading(true);
    try {
      await signUp(email, password);
      toast.success("Account created! Check your email to verify.");
    } catch (error: any) {
      toast.error(error.message || "Failed to create account");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          Create Account
        </h1>
        <p className="text-gray-600">
          Join HabitCrown and start earning rewards
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Email Address
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Enter your email"
            required
          />
        </div>

        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Create a password"
            required
            minLength={6}
          />
        </div>

        <div>
          <label
            htmlFor="confirmPassword"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Confirm Password
          </label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="Confirm your password"
            required
            minLength={6}
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
        >
          {loading ? (
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              Creating Account...
            </div>
          ) : (
            "Create Account"
          )}
        </button>
      </form>

      <div className="mt-6 text-center">
        <button
          onClick={onSwitchToLogin}
          className="text-purple-600 hover:text-purple-700 font-medium transition-colors"
        >
          Already have an account? Sign in
        </button>
      </div>

      <div className="mt-6 text-xs text-gray-500 text-center">
        By creating an account, you agree to our Terms of Service and Privacy
        Policy
      </div>
    </div>
  );
};
</file>

<file path="src/components/habits/HabitForm.tsx">
import { useState } from "react";
import { useHabits } from "../../hooks/useHabits";
import { X } from "lucide-react";
import { toast } from "react-hot-toast";

interface HabitFormProps {
  rewardId: string;
  onClose: () => void;
  habit?: any;
}

export const HabitForm = ({ rewardId, onClose, habit }: HabitFormProps) => {
  const [name, setName] = useState(habit?.name || "");
  const [pointsPerCompletion, setPointsPerCompletion] = useState(
    habit?.points_per_completion || 10
  );
  const { createHabit, updateHabit, isCreating, isUpdating } = useHabits();

  const isEditing = !!habit;
  const isLoading = isCreating || isUpdating;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!name.trim()) {
      toast.error("Please enter a habit name");
      return;
    }

    if (pointsPerCompletion < 1) {
      toast.error("Points per completion must be at least 1");
      return;
    }

    try {
      if (isEditing) {
        updateHabit({
          id: habit.id,
          updates: { name, points_per_completion: pointsPerCompletion },
        });
        toast.success("Habit updated successfully!");
      } else {
        createHabit({
          reward_id: rewardId,
          name,
          points_per_completion: pointsPerCompletion,
        });
        toast.success("Habit created successfully!");
      }
      onClose();
    } catch (error: any) {
      toast.error(error.message || "Something went wrong");
    }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-4">
        <h4 className="text-lg font-semibold text-gray-800">
          {isEditing ? "Edit Habit" : "Add New Habit"}
        </h4>
        <button
          onClick={onClose}
          className="p-1 hover:bg-gray-200 rounded-lg transition-colors"
        >
          <X className="h-4 w-4 text-gray-500" />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="habitName"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Habit Name *
          </label>
          <input
            id="habitName"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="e.g., Exercise for 30 minutes, Read 10 pages, etc."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors text-sm"
            required
          />
        </div>

        <div>
          <label
            htmlFor="points"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Points per Completion *
          </label>
          <input
            id="points"
            type="number"
            value={pointsPerCompletion}
            onChange={(e) => setPointsPerCompletion(Number(e.target.value))}
            min="1"
            max="1000"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors text-sm"
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            Points earned each time you complete this habit
          </p>
        </div>

        <div className="flex items-center space-x-2 pt-2">
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all text-sm"
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                {isEditing ? "Updating..." : "Adding..."}
              </div>
            ) : isEditing ? (
              "Update Habit"
            ) : (
              "Add Habit"
            )}
          </button>

          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};
</file>

<file path="src/components/layout/Dashboard.tsx">
import { useState } from "react";
import { useRewards } from "../../hooks/useRewards";
import { RewardCard } from "../rewards/RewardCard";
import { RewardForm } from "../rewards/RewardForm";
import { Plus } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export const Dashboard = () => {
  const { rewards, isLoading } = useRewards();
  const [showCreateForm, setShowCreateForm] = useState(false);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold text-gray-800">Your Rewards</h2>
          <p className="text-gray-600 mt-1">
            {rewards.length === 0
              ? "Create your first reward to get started!"
              : `${rewards.length} reward${
                  rewards.length === 1 ? "" : "s"
                } in progress`}
          </p>
        </div>

        <button
          onClick={() => setShowCreateForm(true)}
          className="flex items-center space-x-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all shadow-lg hover:shadow-xl"
        >
          <Plus className="h-5 w-5" />
          <span>New Reward</span>
        </button>
      </div>

      <AnimatePresence>
        {showCreateForm && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white rounded-xl shadow-lg p-6 border border-gray-200"
          >
            <RewardForm onClose={() => setShowCreateForm(false)} />
          </motion.div>
        )}
      </AnimatePresence>

      {rewards.length === 0 ? (
        <div className="text-center py-12">
          <div className="bg-gray-100 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
            <Plus className="h-12 w-12 text-gray-400" />
          </div>
          <h3 className="text-xl font-semibold text-gray-700 mb-2">
            No rewards yet
          </h3>
          <p className="text-gray-500 mb-6">
            Create your first reward and start building healthy habits!
          </p>
          <button
            onClick={() => setShowCreateForm(true)}
            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all"
          >
            Create Your First Reward
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <AnimatePresence>
            {rewards.map((reward) => (
              <motion.div
                key={reward.id}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.2 }}
              >
                <RewardCard reward={reward} />
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/components/layout/Header.tsx">
import { useAuth } from "../../hooks/useAuth";
import { LogOut, Trophy } from "lucide-react";
import { toast } from "react-hot-toast";

export const Header = () => {
  const { user, signOut } = useAuth();

  const handleSignOut = async () => {
    try {
      await signOut();
      toast.success("Signed out successfully");
    } catch (error: any) {
      toast.error(error.message || "Failed to sign out");
    }
  };

  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="bg-gradient-to-r from-purple-600 to-blue-600 p-2 rounded-lg">
              <Trophy className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-gray-800">
                Reward Tracker
              </h1>
              <p className="text-sm text-gray-600">
                Track habits, earn rewards
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            <div className="text-right">
              <p className="text-sm font-medium text-gray-800">{user?.email}</p>
              <p className="text-xs text-gray-500">Welcome back!</p>
            </div>
            <button
              onClick={handleSignOut}
              className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <LogOut className="h-4 w-4" />
              <span>Sign Out</span>
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};
</file>

<file path="src/components/rewards/RewardCard.tsx">
import { useState } from "react";
import type { RewardWithHabits } from "../../types/database";
import { useRewards } from "../../hooks/useRewards";
import { useHabits } from "../../hooks/useHabits";
import { ProgressRing } from "../ui/ProgressRing";
import { HabitsList } from "../habits/HabitsList";
import { HabitForm } from "../habits/HabitForm";
import { ClaimRewardModal } from "./ClaimRewardModal";
import { RewardForm } from "./RewardForm";
import { Trophy, Plus, Edit, Trash2, Gift } from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "react-hot-toast";

interface RewardCardProps {
  reward: RewardWithHabits;
}

export const RewardCard = ({ reward }: RewardCardProps) => {
  const [showHabitForm, setShowHabitForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showClaimModal, setShowClaimModal] = useState(false);
  const { deleteReward, isDeleting } = useRewards();
  const { habits } = useHabits(reward.id);

  const progressPercentage = Math.min(
    (reward.current_points / reward.target_points) * 100,
    100
  );
  const isComplete = reward.current_points >= reward.target_points;
  const canClaim = isComplete && !reward.is_claimed;

  const handleDelete = () => {
    if (
      window.confirm(
        "Are you sure you want to delete this reward? This will also delete all associated habits."
      )
    ) {
      deleteReward(reward.id);
      toast.success("Reward deleted successfully");
    }
  };

  const handleClaim = () => {
    if (canClaim) {
      setShowClaimModal(true);
    }
  };

  return (
    <>
      <motion.div
        whileHover={{ y: -2 }}
        className={`bg-white rounded-xl shadow-lg border-2 transition-all duration-300 ${
          reward.is_claimed
            ? "border-green-200 bg-green-50"
            : canClaim
            ? "border-purple-300 bg-gradient-to-br from-purple-50 to-blue-50 shadow-xl"
            : "border-gray-200 hover:border-purple-200 hover:shadow-xl"
        }`}
      >
        <div className="p-6">
          <div className="flex items-start justify-between mb-4">
            <div className="flex-1">
              <h3 className="text-xl font-bold text-gray-800 mb-2 flex items-center">
                {reward.is_claimed && (
                  <Trophy className="h-5 w-5 text-yellow-500 mr-2" />
                )}
                {reward.title}
              </h3>
              {reward.description && (
                <p className="text-gray-600 text-sm mb-3">
                  {reward.description}
                </p>
              )}
            </div>

            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowEditForm(true)}
                className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <Edit className="h-4 w-4" />
              </button>
              <button
                onClick={handleDelete}
                disabled={isDeleting}
                className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>

          <div className="flex items-center justify-between mb-6">
            <div className="flex-1 mr-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">
                  Progress
                </span>
                <span className="text-sm text-gray-600">
                  {reward.current_points} / {reward.target_points} points
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${progressPercentage}%` }}
                  transition={{ duration: 0.5, ease: "easeOut" }}
                  className={`h-3 rounded-full ${
                    isComplete
                      ? "bg-gradient-to-r from-green-400 to-green-600"
                      : "bg-gradient-to-r from-purple-500 to-blue-500"
                  }`}
                />
              </div>
            </div>

            <ProgressRing
              progress={progressPercentage}
              size={60}
              strokeWidth={4}
              className={isComplete ? "text-green-500" : "text-purple-500"}
            />
          </div>

          {canClaim && (
            <motion.button
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleClaim}
              className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-3 px-4 rounded-lg font-medium hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl mb-4 flex items-center justify-center space-x-2"
            >
              <Gift className="h-5 w-5" />
              <span>Claim Reward!</span>
            </motion.button>
          )}

          {reward.is_claimed && (
            <div className="bg-green-100 border border-green-200 rounded-lg p-3 mb-4 text-center">
              <Trophy className="h-6 w-6 text-yellow-500 mx-auto mb-1" />
              <p className="text-green-800 font-medium">Reward Claimed!</p>
              <p className="text-green-600 text-sm">
                Congratulations on completing your goal!
              </p>
            </div>
          )}

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="text-lg font-semibold text-gray-800">Habits</h4>
              {!reward.is_claimed && (
                <button
                  onClick={() => setShowHabitForm(true)}
                  className="flex items-center space-x-1 text-purple-600 hover:text-purple-700 text-sm font-medium"
                >
                  <Plus className="h-4 w-4" />
                  <span>Add Habit</span>
                </button>
              )}
            </div>

            {showHabitForm && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="bg-gray-50 rounded-lg p-4"
              >
                <HabitForm
                  rewardId={reward.id}
                  onClose={() => setShowHabitForm(false)}
                />
              </motion.div>
            )}

            <HabitsList habits={habits} disabled={reward.is_claimed} />
          </div>
        </div>
      </motion.div>

      {showEditForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <RewardForm
                reward={reward}
                onClose={() => setShowEditForm(false)}
              />
            </div>
          </div>
        </div>
      )}

      {showClaimModal && (
        <ClaimRewardModal
          reward={reward}
          onClose={() => setShowClaimModal(false)}
        />
      )}
    </>
  );
};
</file>

<file path="src/components/rewards/RewardForm.tsx">
import { useState } from "react";
import { useRewards } from "../../hooks/useRewards";
import { X } from "lucide-react";
import { toast } from "react-hot-toast";

interface RewardFormProps {
  onClose: () => void;
  reward?: any;
}

export const RewardForm = ({ onClose, reward }: RewardFormProps) => {
  const [title, setTitle] = useState(reward?.title || "");
  const [description, setDescription] = useState(reward?.description || "");
  const [targetPoints, setTargetPoints] = useState(
    reward?.target_points || 100
  );
  const { createReward, updateReward, isCreating, isUpdating } = useRewards();

  const isEditing = !!reward;
  const isLoading = isCreating || isUpdating;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!title.trim()) {
      toast.error("Please enter a reward title");
      return;
    }

    if (targetPoints < 1) {
      toast.error("Target points must be at least 1");
      return;
    }

    try {
      if (isEditing) {
        updateReward({
          id: reward.id,
          updates: { title, description, target_points: targetPoints },
        });
        toast.success("Reward updated successfully!");
      } else {
        createReward({
          title,
          description,
          target_points: targetPoints,
        });
        toast.success("Reward created successfully!");
      }
      onClose();
    } catch (error: any) {
      toast.error(error.message || "Something went wrong");
    }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-gray-800">
          {isEditing ? "Edit Reward" : "Create New Reward"}
        </h3>
        <button
          onClick={onClose}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <X className="h-5 w-5 text-gray-500" />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Reward Title *
          </label>
          <input
            id="title"
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="e.g., New smartphone, Weekend trip, etc."
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            required
          />
        </div>

        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Description
          </label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe your reward in detail..."
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors resize-none"
          />
        </div>

        <div>
          <label
            htmlFor="targetPoints"
            className="block text-sm font-medium text-gray-700 mb-2"
          >
            Target Points *
          </label>
          <input
            id="targetPoints"
            type="number"
            value={targetPoints}
            onChange={(e) => setTargetPoints(Number(e.target.value))}
            min="1"
            max="10000"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            required
          />
          <p className="text-xs text-gray-500 mt-1">
            How many points needed to earn this reward?
          </p>
        </div>

        <div className="flex items-center space-x-3 pt-4">
          <button
            type="submit"
            disabled={isLoading}
            className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
          >
            {isLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                {isEditing ? "Updating..." : "Creating..."}
              </div>
            ) : isEditing ? (
              "Update Reward"
            ) : (
              "Create Reward"
            )}
          </button>

          <button
            type="button"
            onClick={onClose}
            className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};
</file>

<file path="src/components/ui/ProgressRing.tsx">
interface ProgressRingProps {
  progress: number;
  size?: number;
  strokeWidth?: number;
  className?: string;
}

export const ProgressRing = ({
  progress,
  size = 80,
  strokeWidth = 6,
  className = "text-purple-500",
}: ProgressRingProps) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const strokeDashoffset = circumference - (progress / 100) * circumference;

  return (
    <div className="relative">
      <svg className="transform -rotate-90" width={size} height={size}>
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          className="text-gray-200"
        />
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          stroke="currentColor"
          strokeWidth={strokeWidth}
          fill="transparent"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          strokeLinecap="round"
          className={`transition-all duration-500 ease-out ${className}`}
        />
      </svg>
      <div className="absolute inset-0 flex items-center justify-center">
        <span className="text-sm font-bold text-gray-700">
          {Math.round(progress)}%
        </span>
      </div>
    </div>
  );
};
</file>

<file path="src/hooks/useRewards.tsx">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "../services/supabase";
import type {
  Reward,
  RewardInsert,
  RewardUpdate,
  RewardWithHabits,
} from "../types/database";

const rewardsService = {
  async getRewards(): Promise<RewardWithHabits[]> {
    const { data, error } = await supabase
      .from("rewards")
      .select(
        `
        *,
        habits (*)
      `
      )
      .order("created_at", { ascending: false });

    if (error) throw error;
    return data as RewardWithHabits[];
  },

  async createReward(reward: RewardInsert): Promise<Reward> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("rewards")
      .insert({
        ...reward,
        user_id: user.id,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async updateReward(id: string, updates: RewardUpdate): Promise<Reward> {
    const { data, error } = await supabase
      .from("rewards")
      .update(updates)
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async deleteReward(id: string): Promise<void> {
    const { error } = await supabase.from("rewards").delete().eq("id", id);

    if (error) throw error;
  },

  async claimReward(id: string): Promise<Reward> {
    const { data, error } = await supabase
      .from("rewards")
      .update({ is_claimed: true })
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },
};

export const useRewards = () => {
  const queryClient = useQueryClient();

  const rewardsQuery = useQuery({
    queryKey: ["rewards"],
    queryFn: rewardsService.getRewards,
  });

  const createRewardMutation = useMutation({
    mutationFn: rewardsService.createReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const updateRewardMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: RewardUpdate }) =>
      rewardsService.updateReward(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const deleteRewardMutation = useMutation({
    mutationFn: rewardsService.deleteReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const claimRewardMutation = useMutation({
    mutationFn: rewardsService.claimReward,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  return {
    rewards: rewardsQuery.data ?? [],
    isLoading: rewardsQuery.isLoading,
    error: rewardsQuery.error,
    createReward: createRewardMutation.mutate,
    updateReward: updateRewardMutation.mutate,
    deleteReward: deleteRewardMutation.mutate,
    claimReward: claimRewardMutation.mutate,
    isCreating: createRewardMutation.isPending,
    isUpdating: updateRewardMutation.isPending,
    isDeleting: deleteRewardMutation.isPending,
    isClaiming: claimRewardMutation.isPending,
  };
};
</file>

<file path="src/services/supabase.ts">
import { createClient } from "@supabase/supabase-js";
import type { Database } from "../types/database";

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Missing Supabase environment variables");
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

export const getUser = async () => {
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();
  if (error) throw error;
  return user;
};

export const signOut = async () => {
  const { error } = await supabase.auth.signOut();
  if (error) throw error;
};

export const signInWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });
  if (error) throw error;
  return data;
};

export const signUpWithEmail = async (email: string, password: string) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
  });
  if (error) throw error;
  return data;
};
</file>

<file path="src/types/database.ts">
export interface Database {
  public: {
    Tables: {
      rewards: {
        Row: {
          id: string;
          user_id: string;
          title: string;
          description: string | null;
          target_points: number;
          current_points: number;
          is_claimed: boolean;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id?: string;
          title: string;
          description?: string | null;
          target_points?: number;
          current_points?: number;
          is_claimed?: boolean;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          title?: string;
          description?: string | null;
          target_points?: number;
          current_points?: number;
          is_claimed?: boolean;
          created_at?: string;
          updated_at?: string;
        };
      };
      habits: {
        Row: {
          id: string;
          user_id: string;
          reward_id: string;
          name: string;
          points_per_completion: number;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id?: string;
          reward_id: string;
          name: string;
          points_per_completion?: number;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          reward_id?: string;
          name?: string;
          points_per_completion?: number;
          created_at?: string;
          updated_at?: string;
        };
      };
      habit_completions: {
        Row: {
          id: string;
          habit_id: string;
          user_id: string;
          points_earned: number;
          completed_at: string;
        };
        Insert: {
          id?: string;
          habit_id: string;
          user_id?: string;
          points_earned: number;
          completed_at?: string;
        };
        Update: {
          id?: string;
          habit_id?: string;
          user_id?: string;
          points_earned?: number;
          completed_at?: string;
        };
      };
    };
  };
}

export type Reward = Database["public"]["Tables"]["rewards"]["Row"];
export type RewardInsert = Database["public"]["Tables"]["rewards"]["Insert"];
export type RewardUpdate = Database["public"]["Tables"]["rewards"]["Update"];

export type Habit = Database["public"]["Tables"]["habits"]["Row"];
export type HabitInsert = Database["public"]["Tables"]["habits"]["Insert"];
export type HabitUpdate = Database["public"]["Tables"]["habits"]["Update"];

export type HabitCompletion =
  Database["public"]["Tables"]["habit_completions"]["Row"];
export type HabitCompletionInsert =
  Database["public"]["Tables"]["habit_completions"]["Insert"];

export interface RewardWithHabits extends Reward {
  habits: Habit[];
}

export interface HabitWithCompletions extends Habit {
  habit_completions: HabitCompletion[];
  completions_today: number;
}

export interface User {
  id: string;
  email: string;
  created_at: string;
}

export interface AuthState {
  user: User | null;
  loading: boolean;
  error: string | null;
}
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { AuthProvider, useAuth } from "./hooks/useAuth";
import { AuthLayout } from "./components/auth/AuthLayout";
import { Dashboard } from "./components/layout/Dashboard";
import { Header } from "./components/layout/Header";
import { Toaster } from "react-hot-toast";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,
      refetchOnWindowFocus: false,
    },
  },
});

const AppContent = () => {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  if (!user) {
    return <AuthLayout />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <Header />
      <main className="container mx-auto px-4 py-8">
        <Dashboard />
      </main>
    </div>
  );
};

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <AppContent />
        <Toaster position="top-right" />
      </AuthProvider>
    </QueryClientProvider>
  );
}
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="package.json">
{
  "name": "habitcrown",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.49.8",
    "@tanstack/react-query": "^5.79.0",
    "framer-motion": "^12.15.0",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-confetti": "^6.4.0",
    "react-dom": "^19.1.0",
    "react-hot-toast": "^2.5.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@tailwindcss/vite": "^4.1.8",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="structure.txt">
.
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── README.md
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   │   └── react.svg
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── structure.txt
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

3 directories, 16 files
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
});
</file>

<file path="src/components/habits/HabitsList.tsx">
import { useState } from "react";
import type { HabitWithCompletions } from "../../types/database";
import { useHabits } from "../../hooks/useHabits";
import { HabitForm } from "./HabitForm";
import { CheckCircle, Circle, Edit, Trash2 } from "lucide-react";
import { motion } from "framer-motion";
import { toast } from "react-hot-toast";

interface HabitsListProps {
  habits: HabitWithCompletions[];
  disabled?: boolean;
}

export const HabitsList = ({ habits, disabled = false }: HabitsListProps) => {
  const [editingHabit, setEditingHabit] = useState<string | null>(null);
  const { completeHabit, deleteHabit, isCompleting, isDeleting } = useHabits();

  const handleToggleHabit = (habit: HabitWithCompletions) => {
    if (disabled) return;

    if (habit.completions_today > 0) {
      toast.success("Habit already completed today!");
      return;
    }

    completeHabit({
      habitId: habit.id,
      pointsEarned: habit.points_per_completion,
    });
    toast.success(`+${habit.points_per_completion} points earned!`);
  };

  const handleDeleteHabit = (habitId: string) => {
    if (window.confirm("Are you sure you want to delete this habit?")) {
      deleteHabit(habitId);
      toast.success("Habit deleted successfully");
    }
  };

  if (habits.length === 0) {
    return (
      <div className="text-center py-6 text-gray-500">
        <Circle className="h-8 w-8 mx-auto mb-2 text-gray-300" />
        <p className="text-sm">No habits added yet</p>
        <p className="text-xs">Add habits to start earning points!</p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {habits.map((habit) => (
        <motion.div
          key={habit.id}
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          className={`border rounded-lg p-3 transition-all ${
            habit.completions_today > 0
              ? "bg-green-50 border-green-200"
              : disabled
              ? "bg-gray-50 border-gray-200"
              : "bg-white border-gray-200 hover:border-purple-200"
          }`}
        >
          {editingHabit === habit.id ? (
            <HabitForm
              rewardId={habit.reward_id}
              habit={habit}
              onClose={() => setEditingHabit(null)}
            />
          ) : (
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3 flex-1">
                <button
                  onClick={() => handleToggleHabit(habit)}
                  disabled={
                    disabled || isCompleting || habit.completions_today > 0
                  }
                  className={`flex-shrink-0 transition-colors ${
                    habit.completions_today > 0
                      ? "text-green-500"
                      : disabled
                      ? "text-gray-300 cursor-not-allowed"
                      : "text-gray-400 hover:text-purple-500"
                  }`}
                >
                  {habit.completions_today > 0 ? (
                    <CheckCircle className="h-6 w-6" />
                  ) : (
                    <Circle className="h-6 w-6" />
                  )}
                </button>

                <div className="flex-1">
                  <h5
                    className={`font-medium ${
                      habit.completions_today > 0
                        ? "text-green-800 line-through"
                        : disabled
                        ? "text-gray-500"
                        : "text-gray-800"
                    }`}
                  >
                    {habit.name}
                  </h5>
                  <p className="text-xs text-gray-500">
                    {habit.points_per_completion} points per completion
                    {habit.completions_today > 0 && (
                      <span className="text-green-600 font-medium ml-2">
                        ✓ Completed today
                      </span>
                    )}
                  </p>
                </div>
              </div>

              {!disabled && (
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => setEditingHabit(habit.id)}
                    className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDeleteHabit(habit.id)}
                    disabled={isDeleting}
                    className="p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              )}
            </div>
          )}
        </motion.div>
      ))}
    </div>
  );
};
</file>

<file path="src/components/rewards/ClaimRewardModal.tsx">
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useRewards } from "../../hooks/useRewards";
import type { Reward } from "../../types/database";
import { Trophy, Gift, Sparkles, X, PartyPopper } from "lucide-react";
import { toast } from "react-hot-toast";
import Confetti from "react-confetti";

interface ClaimRewardModalProps {
  reward: Reward;
  onClose: () => void;
}

export const ClaimRewardModal = ({
  reward,
  onClose,
}: ClaimRewardModalProps) => {
  const [showConfetti, setShowConfetti] = useState(false);
  const [claimed, setClaimed] = useState(false);
  const { claimReward, isClaiming } = useRewards();

  const handleClaim = async () => {
    try {
      claimReward(reward.id);
      setClaimed(true);
      setShowConfetti(true);
      toast.success("Congratulations! Reward claimed!");

      setTimeout(() => {
        setShowConfetti(false);
        setTimeout(onClose, 1000);
      }, 3000);
    } catch (error: any) {
      toast.error(error.message || "Failed to claim reward");
    }
  };

  const celebrationVariants = {
    initial: { scale: 0, rotate: -180, opacity: 0 },
    animate: {
      scale: [0, 1.2, 1],
      rotate: [180, 0],
      opacity: 1,
      transition: { duration: 0.6, ease: "easeOut" },
    },
    exit: { scale: 0, opacity: 0, transition: { duration: 0.3 } },
  };

  const sparkleVariants = {
    animate: {
      scale: [1, 1.2, 1],
      rotate: [0, 180, 360],
      transition: {
        duration: 2,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  return (
    <>
      {showConfetti && (
        <Confetti
          width={window.innerWidth}
          height={window.innerHeight}
          numberOfPieces={200}
          recycle={false}
          gravity={0.3}
        />
      )}

      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-8 text-center relative overflow-hidden"
        >
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="h-5 w-5" />
          </button>

          <AnimatePresence mode="wait">
            {!claimed ? (
              <motion.div
                key="claim"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-6"
              >
                <div className="relative">
                  <motion.div
                    animate={sparkleVariants.animate}
                    className="absolute -top-2 -right-2 text-yellow-400"
                  >
                    <Sparkles className="h-6 w-6" />
                  </motion.div>
                  <motion.div
                    animate={sparkleVariants.animate}
                    className="absolute -bottom-2 -left-2 text-purple-400"
                  >
                    <Sparkles className="h-5 w-5" />
                  </motion.div>

                  <div className="bg-gradient-to-br from-purple-100 to-blue-100 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4">
                    <Gift className="h-10 w-10 text-purple-600" />
                  </div>
                </div>

                <div>
                  <h2 className="text-2xl font-bold text-gray-800 mb-2">
                    Congratulations! 🎉
                  </h2>
                  <p className="text-gray-600 mb-4">
                    You've reached your goal and can now claim your reward!
                  </p>

                  <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-4 mb-6">
                    <h3 className="font-bold text-lg text-gray-800 mb-2">
                      {reward.title}
                    </h3>
                    {reward.description && (
                      <p className="text-gray-600 text-sm">
                        {reward.description}
                      </p>
                    )}
                    <div className="mt-3 flex items-center justify-center space-x-2 text-sm text-purple-600">
                      <Trophy className="h-4 w-4" />
                      <span className="font-medium">
                        {reward.current_points} / {reward.target_points} points
                        completed
                      </span>
                    </div>
                  </div>
                </div>

                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleClaim}
                  disabled={isClaiming}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
                >
                  {isClaiming ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>Claiming...</span>
                    </>
                  ) : (
                    <>
                      <PartyPopper className="h-6 w-6" />
                      <span>Claim My Reward!</span>
                    </>
                  )}
                </motion.button>
              </motion.div>
            ) : (
              <motion.div
                key="success"
                variants={celebrationVariants}
                initial="initial"
                animate="animate"
                exit="exit"
                className="space-y-6"
              >
                <motion.div
                  animate={{
                    rotate: [0, 10, -10, 0],
                    scale: [1, 1.1, 1],
                  }}
                  transition={{
                    duration: 0.5,
                    repeat: 2,
                    ease: "easeInOut",
                  }}
                  className="bg-gradient-to-br from-yellow-100 to-orange-100 rounded-full w-24 h-24 flex items-center justify-center mx-auto"
                >
                  <Trophy className="h-12 w-12 text-yellow-600" />
                </motion.div>

                <div>
                  <motion.h2
                    animate={{
                      scale: [1, 1.05, 1],
                    }}
                    transition={{
                      duration: 1,
                      repeat: 1,
                      ease: "easeInOut",
                    }}
                    className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-2"
                  >
                    Reward Claimed! 🎊
                  </motion.h2>
                  <p className="text-gray-600 text-lg">
                    You've earned it! Enjoy your {reward.title}
                  </p>
                </div>

                <motion.div
                  animate={{
                    y: [0, -5, 0],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut",
                  }}
                  className="text-4xl"
                >
                  🎉🎁🌟
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </>
  );
};
</file>

<file path="src/hooks/useAuth.tsx">
import { useState, useEffect, createContext, useContext } from "react";
import type { User } from "@supabase/supabase-js";
import { supabase } from "../services/supabase";

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getSession = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      setLoading(false);
    };

    getSession();

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) throw error;
  };

  const signUp = async (email: string, password: string) => {
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) throw error;
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  };

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
</file>

<file path="src/hooks/useHabits.tsx">
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "../services/supabase";
import type {
  Habit,
  HabitInsert,
  HabitUpdate,
  HabitCompletion,
  HabitWithCompletions,
} from "../types/database";

const habitsService = {
  async getHabits(rewardId?: string): Promise<HabitWithCompletions[]> {
    let query = supabase
      .from("habits")
      .select(
        `
        *,
        habit_completions (*)
      `
      )
      .order("created_at", { ascending: false });

    if (rewardId) {
      query = query.eq("reward_id", rewardId);
    }

    const { data, error } = await query;

    if (error) throw error;

    const today = new Date().toDateString();

    return data.map((habit) => ({
      ...habit,
      completions_today: habit.habit_completions.filter(
        (completion: any) =>
          new Date(completion.completed_at).toDateString() === today
      ).length,
    })) as HabitWithCompletions[];
  },

  async createHabit(habit: HabitInsert): Promise<Habit> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("habits")
      .insert({
        ...habit,
        user_id: user.id,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async updateHabit(id: string, updates: HabitUpdate): Promise<Habit> {
    const { data, error } = await supabase
      .from("habits")
      .update(updates)
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async deleteHabit(id: string): Promise<void> {
    const { error } = await supabase.from("habits").delete().eq("id", id);

    if (error) throw error;
  },

  async completeHabit(
    habitId: string,
    pointsEarned: number
  ): Promise<HabitCompletion> {
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();
    if (authError || !user) throw new Error("User not authenticated");

    const { data, error } = await supabase
      .from("habit_completions")
      .insert({
        habit_id: habitId,
        user_id: user.id,
        points_earned: pointsEarned,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  async undoHabitCompletion(completionId: string): Promise<void> {
    const { error } = await supabase
      .from("habit_completions")
      .delete()
      .eq("id", completionId);

    if (error) throw error;
  },

  async getTodayCompletions(habitId: string): Promise<HabitCompletion[]> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const { data, error } = await supabase
      .from("habit_completions")
      .select("*")
      .eq("habit_id", habitId)
      .gte("completed_at", today.toISOString());

    if (error) throw error;
    return data;
  },
};

export const useHabits = (rewardId?: string) => {
  const queryClient = useQueryClient();

  const habitsQuery = useQuery({
    queryKey: ["habits", rewardId],
    queryFn: () => habitsService.getHabits(rewardId),
  });

  const createHabitMutation = useMutation({
    mutationFn: habitsService.createHabit,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const updateHabitMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: HabitUpdate }) =>
      habitsService.updateHabit(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
    },
  });

  const deleteHabitMutation = useMutation({
    mutationFn: habitsService.deleteHabit,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const completeHabitMutation = useMutation({
    mutationFn: ({
      habitId,
      pointsEarned,
    }: {
      habitId: string;
      pointsEarned: number;
    }) => habitsService.completeHabit(habitId, pointsEarned),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  const undoCompletionMutation = useMutation({
    mutationFn: habitsService.undoHabitCompletion,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["habits"] });
      queryClient.invalidateQueries({ queryKey: ["rewards"] });
    },
  });

  return {
    habits: habitsQuery.data ?? [],
    isLoading: habitsQuery.isLoading,
    error: habitsQuery.error,
    createHabit: createHabitMutation.mutate,
    updateHabit: updateHabitMutation.mutate,
    deleteHabit: deleteHabitMutation.mutate,
    completeHabit: completeHabitMutation.mutate,
    undoCompletion: undoCompletionMutation.mutate,
    isCreating: createHabitMutation.isPending,
    isUpdating: updateHabitMutation.isPending,
    isDeleting: deleteHabitMutation.isPending,
    isCompleting: completeHabitMutation.isPending,
  };
};
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/crown-favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="HabitCrown - Build habits, earn rewards. Transform your daily habits into meaningful rewards and celebrate your achievements."
    />
    <meta name="theme-color" content="#8b5cf6" />

    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="HabitCrown - Earn Your Crown" />
    <meta
      property="og:description"
      content="Build habits, earn rewards. Transform your daily habits into meaningful rewards."
    />
    <meta property="og:image" content="/crown-social.png" />

    <title>HabitCrown - Earn Your Crown</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

</files>
